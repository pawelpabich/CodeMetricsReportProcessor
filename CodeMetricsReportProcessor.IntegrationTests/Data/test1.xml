<?xml version="1.0" encoding="utf-8"?>
<CodeMetricsReport Version="10.0">
  <Targets>
    <Target Name="C:\Program Files (x86)\Microsoft Visual Studio 10.0\Team Tools\Static Analysis Tools\FxCop\lib\nunit.framework.dll">
      <Modules>
        <Module Name="nunit.framework.dll" AssemblyVersion="2.5.10.11092">
          <Metrics>
            <Metric Name="MaintainabilityIndex" Value="86" />
            <Metric Name="CyclomaticComplexity" Value="1,951" />
            <Metric Name="ClassCoupling" Value="196" />
            <Metric Name="DepthOfInheritance" Value="5" />
            <Metric Name="LinesOfCode" Value="3,421" />
          </Metrics>
          <Namespaces>
            <Namespace Name="NUnit.Framework">
              <Metrics>
                <Metric Name="MaintainabilityIndex" Value="91" />
                <Metric Name="CyclomaticComplexity" Value="931" />
                <Metric Name="ClassCoupling" Value="117" />
                <Metric Name="DepthOfInheritance" Value="5" />
                <Metric Name="LinesOfCode" Value="1,440" />
              </Metrics>
              <Types>
                <Type Name="CategoryAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="81" />
                    <Metric Name="CyclomaticComplexity" Value="4" />
                    <Metric Name="ClassCoupling" Value="3" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="8" />
                  </Metrics>
                  <Members>
                    <Member Name="CategoryAttribute(string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="CategoryAttribute()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="69" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="6" />
                      </Metrics>
                    </Member>
                    <Member Name="Name.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="DatapointAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="100" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="1" />
                  </Metrics>
                  <Members>
                    <Member Name="DatapointAttribute()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="DatapointsAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="100" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="1" />
                  </Metrics>
                  <Members>
                    <Member Name="DatapointsAttribute()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="DescriptionAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="92" />
                    <Metric Name="CyclomaticComplexity" Value="2" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="2" />
                  </Metrics>
                  <Members>
                    <Member Name="DescriptionAttribute(string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Description.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="MessageMatch">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="100" />
                    <Metric Name="CyclomaticComplexity" Value="0" />
                    <Metric Name="ClassCoupling" Value="0" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="0" />
                  </Metrics>
                  <Members />
                </Type>
                <Type Name="ExpectedExceptionAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="91" />
                    <Metric Name="CyclomaticComplexity" Value="15" />
                    <Metric Name="ClassCoupling" Value="4" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="17" />
                  </Metrics>
                  <Members>
                    <Member Name="ExpectedExceptionAttribute()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ExpectedExceptionAttribute(Type)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="ExpectedExceptionAttribute(string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ExpectedException.get() : Type">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ExpectedException.set(Type) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="ExpectedExceptionName.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ExpectedExceptionName.set(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ExpectedMessage.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ExpectedMessage.set(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="UserMessage.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="UserMessage.set(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="MatchType.get() : MessageMatch">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="MatchType.set(MessageMatch) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Handler.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Handler.set(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="ExplicitAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="92" />
                    <Metric Name="CyclomaticComplexity" Value="3" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="3" />
                  </Metrics>
                  <Members>
                    <Member Name="ExplicitAttribute()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ExplicitAttribute(string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Reason.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="IgnoreAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="92" />
                    <Metric Name="CyclomaticComplexity" Value="3" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="3" />
                  </Metrics>
                  <Members>
                    <Member Name="IgnoreAttribute()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IgnoreAttribute(string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Reason.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="IncludeExcludeAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="92" />
                    <Metric Name="CyclomaticComplexity" Value="8" />
                    <Metric Name="ClassCoupling" Value="1" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="8" />
                  </Metrics>
                  <Members>
                    <Member Name="IncludeExcludeAttribute()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IncludeExcludeAttribute(string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Include.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Include.set(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Exclude.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Exclude.set(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Reason.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Reason.set(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="PlatformAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="97" />
                    <Metric Name="CyclomaticComplexity" Value="2" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="2" />
                  </Metrics>
                  <Members>
                    <Member Name="PlatformAttribute()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="PlatformAttribute(string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="98" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="CultureAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="97" />
                    <Metric Name="CyclomaticComplexity" Value="2" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="2" />
                  </Metrics>
                  <Members>
                    <Member Name="CultureAttribute()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="CultureAttribute(string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="98" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="PropertyAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="81" />
                    <Metric Name="CyclomaticComplexity" Value="7" />
                    <Metric Name="ClassCoupling" Value="5" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="14" />
                  </Metrics>
                  <Members>
                    <Member Name="PropertyAttribute(string, string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="PropertyAttribute(string, int)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="PropertyAttribute(string, double)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="PropertyAttribute()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="PropertyAttribute(object)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="67" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="6" />
                      </Metrics>
                    </Member>
                    <Member Name="Properties.get() : IDictionary">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="CombinatorialAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="95" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="1" />
                  </Metrics>
                  <Members>
                    <Member Name="CombinatorialAttribute()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="PairwiseAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="95" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="1" />
                  </Metrics>
                  <Members>
                    <Member Name="PairwiseAttribute()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="SequentialAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="95" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="1" />
                  </Metrics>
                  <Members>
                    <Member Name="SequentialAttribute()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="MaxTimeAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="98" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="1" />
                  </Metrics>
                  <Members>
                    <Member Name="MaxTimeAttribute(int)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="98" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="ParameterDataAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="100" />
                    <Metric Name="CyclomaticComplexity" Value="2" />
                    <Metric Name="ClassCoupling" Value="4" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="1" />
                  </Metrics>
                  <Members>
                    <Member Name="GetData(ParameterInfo) : IEnumerable">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="ParameterDataAttribute()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="ValuesAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="62" />
                    <Metric Name="CyclomaticComplexity" Value="20" />
                    <Metric Name="ClassCoupling" Value="11" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="45" />
                  </Metrics>
                  <Members>
                    <Member Name="ValuesAttribute(object)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="79" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="ValuesAttribute(object, object)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="78" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="ValuesAttribute(object, object, object)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="75" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                    <Member Name="ValuesAttribute(params object[])">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="GetData(ParameterInfo) : IEnumerable">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="44" />
                        <Metric Name="CyclomaticComplexity" Value="16" />
                        <Metric Name="ClassCoupling" Value="9" />
                        <Metric Name="LinesOfCode" Value="34" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="RandomAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="70" />
                    <Metric Name="CyclomaticComplexity" Value="8" />
                    <Metric Name="ClassCoupling" Value="7" />
                    <Metric Name="DepthOfInheritance" Value="4" />
                    <Metric Name="LinesOfCode" Value="22" />
                  </Metrics>
                  <Members>
                    <Member Name="RandomAttribute(int)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="RandomAttribute(double, double, int)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="78" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="RandomAttribute(int, int, int)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="78" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="GetData(ParameterInfo) : IEnumerable">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="57" />
                        <Metric Name="CyclomaticComplexity" Value="5" />
                        <Metric Name="ClassCoupling" Value="7" />
                        <Metric Name="LinesOfCode" Value="14" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="RandomAttribute.SampleType">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="100" />
                    <Metric Name="CyclomaticComplexity" Value="0" />
                    <Metric Name="ClassCoupling" Value="0" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="0" />
                  </Metrics>
                  <Members />
                </Type>
                <Type Name="RangeAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="66" />
                    <Metric Name="CyclomaticComplexity" Value="9" />
                    <Metric Name="ClassCoupling" Value="1" />
                    <Metric Name="DepthOfInheritance" Value="4" />
                    <Metric Name="LinesOfCode" Value="38" />
                  </Metrics>
                  <Members>
                    <Member Name="RangeAttribute(int, int)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="RangeAttribute(int, int, int)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="65" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="8" />
                      </Metrics>
                    </Member>
                    <Member Name="RangeAttribute(long, long, long)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="64" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="9" />
                      </Metrics>
                    </Member>
                    <Member Name="RangeAttribute(double, double, double)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="62" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="10" />
                      </Metrics>
                    </Member>
                    <Member Name="RangeAttribute(float, float, float)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="62" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="10" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="RepeatAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="98" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="1" />
                  </Metrics>
                  <Members>
                    <Member Name="RepeatAttribute(int)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="98" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="RequiredAddinAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="92" />
                    <Metric Name="CyclomaticComplexity" Value="2" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="2" />
                  </Metrics>
                  <Members>
                    <Member Name="RequiredAddinAttribute(string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="RequiredAddin.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="SetCultureAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="95" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="1" />
                  </Metrics>
                  <Members>
                    <Member Name="SetCultureAttribute(string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="SetUICultureAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="95" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="1" />
                  </Metrics>
                  <Members>
                    <Member Name="SetUICultureAttribute(string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="SetUpAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="100" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="1" />
                  </Metrics>
                  <Members>
                    <Member Name="SetUpAttribute()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="SetUpFixtureAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="100" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="1" />
                  </Metrics>
                  <Members>
                    <Member Name="SetUpFixtureAttribute()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="SuiteAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="100" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="1" />
                  </Metrics>
                  <Members>
                    <Member Name="SuiteAttribute()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="TearDownAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="100" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="1" />
                  </Metrics>
                  <Members>
                    <Member Name="TearDownAttribute()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="TestAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="94" />
                    <Metric Name="CyclomaticComplexity" Value="3" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="3" />
                  </Metrics>
                  <Members>
                    <Member Name="Description.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Description.set(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="TestAttribute()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="ITestCaseData">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="100" />
                    <Metric Name="CyclomaticComplexity" Value="8" />
                    <Metric Name="ClassCoupling" Value="1" />
                    <Metric Name="DepthOfInheritance" Value="0" />
                    <Metric Name="LinesOfCode" Value="0" />
                  </Metrics>
                  <Members>
                    <Member Name="Arguments.get() : object[]">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="Result.get() : object">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="ExpectedException.get() : Type">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="ExpectedExceptionName.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="TestName.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="Description.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="Ignored.get() : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="IgnoreReason.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="TestCaseAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="89" />
                    <Metric Name="CyclomaticComplexity" Value="31" />
                    <Metric Name="ClassCoupling" Value="6" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="44" />
                  </Metrics>
                  <Members>
                    <Member Name="TestCaseAttribute(params object[])">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="75" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                    <Member Name="TestCaseAttribute(object)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="79" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="TestCaseAttribute(object, object)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="78" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="TestCaseAttribute(object, object, object)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="75" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                    <Member Name="Arguments.get() : object[]">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Result.get() : object">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Result.set(object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Categories.get() : IList">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="74" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                    <Member Name="Category.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Category.set(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ExpectedException.get() : Type">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ExpectedException.set(Type) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="ExpectedExceptionName.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ExpectedExceptionName.set(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ExpectedMessage.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ExpectedMessage.set(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="MatchType.get() : MessageMatch">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="MatchType.set(MessageMatch) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Description.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Description.set(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="TestName.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="TestName.set(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Ignore.get() : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Ignore.set(bool) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Ignored.get() : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Ignored.set(bool) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IgnoreReason.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IgnoreReason.set(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="79" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="TestCaseSourceAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="91" />
                    <Metric Name="CyclomaticComplexity" Value="4" />
                    <Metric Name="ClassCoupling" Value="3" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="5" />
                  </Metrics>
                  <Members>
                    <Member Name="TestCaseSourceAttribute(string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="TestCaseSourceAttribute(Type, string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="SourceName.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="SourceType.get() : Type">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="TestFixtureAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="76" />
                    <Metric Name="CyclomaticComplexity" Value="29" />
                    <Metric Name="ClassCoupling" Value="5" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="57" />
                  </Metrics>
                  <Members>
                    <Member Name="TestFixtureAttribute()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="98" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="TestFixtureAttribute(params object[])">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="63" />
                        <Metric Name="CyclomaticComplexity" Value="5" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="10" />
                      </Metrics>
                    </Member>
                    <Member Name="Description.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Description.set(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Category.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Category.set(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Categories.get() : IList">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="74" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                    <Member Name="Arguments.get() : object[]">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="79" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="Ignore.get() : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Ignore.set(bool) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IgnoreReason.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IgnoreReason.set(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="79" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="TypeArgs.get() : Type[]">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="79" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="TypeArgs.set(Type[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="SeparateArgs() : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="50" />
                        <Metric Name="CyclomaticComplexity" Value="7" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="25" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="TestFixtureSetUpAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="100" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="1" />
                  </Metrics>
                  <Members>
                    <Member Name="TestFixtureSetUpAttribute()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="TestFixtureTearDownAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="100" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="1" />
                  </Metrics>
                  <Members>
                    <Member Name="TestFixtureTearDownAttribute()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="TheoryAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="100" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="1" />
                  </Metrics>
                  <Members>
                    <Member Name="TheoryAttribute()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="TimeoutAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="98" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="1" />
                  </Metrics>
                  <Members>
                    <Member Name="TimeoutAttribute(int)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="98" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="RequiresSTAAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="85" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="4" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="2" />
                  </Metrics>
                  <Members>
                    <Member Name="RequiresSTAAttribute()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="RequiresMTAAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="85" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="4" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="2" />
                  </Metrics>
                  <Members>
                    <Member Name="RequiresMTAAttribute()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="RequiresThreadAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="92" />
                    <Metric Name="CyclomaticComplexity" Value="2" />
                    <Metric Name="ClassCoupling" Value="4" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="3" />
                  </Metrics>
                  <Members>
                    <Member Name="RequiresThreadAttribute()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="98" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="RequiresThreadAttribute(ApartmentState)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="ValueSourceAttribute">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="91" />
                    <Metric Name="CyclomaticComplexity" Value="4" />
                    <Metric Name="ClassCoupling" Value="3" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="5" />
                  </Metrics>
                  <Members>
                    <Member Name="ValueSourceAttribute(string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ValueSourceAttribute(Type, string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="SourceName.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="SourceType.get() : Type">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="AssertionException">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="94" />
                    <Metric Name="CyclomaticComplexity" Value="3" />
                    <Metric Name="ClassCoupling" Value="3" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="3" />
                  </Metrics>
                  <Members>
                    <Member Name="AssertionException(string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="98" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AssertionException(string, Exception)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AssertionException(SerializationInfo, StreamingContext)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="IgnoreException">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="94" />
                    <Metric Name="CyclomaticComplexity" Value="3" />
                    <Metric Name="ClassCoupling" Value="3" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="3" />
                  </Metrics>
                  <Members>
                    <Member Name="IgnoreException(string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="98" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IgnoreException(string, Exception)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IgnoreException(SerializationInfo, StreamingContext)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="InconclusiveException">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="94" />
                    <Metric Name="CyclomaticComplexity" Value="3" />
                    <Metric Name="ClassCoupling" Value="3" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="3" />
                  </Metrics>
                  <Members>
                    <Member Name="InconclusiveException(string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="98" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="InconclusiveException(string, Exception)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="InconclusiveException(SerializationInfo, StreamingContext)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="SuccessException">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="94" />
                    <Metric Name="CyclomaticComplexity" Value="3" />
                    <Metric Name="ClassCoupling" Value="3" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="3" />
                  </Metrics>
                  <Members>
                    <Member Name="SuccessException(string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="98" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="SuccessException(string, Exception)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="SuccessException(SerializationInfo, StreamingContext)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="TestDelegate">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="100" />
                    <Metric Name="CyclomaticComplexity" Value="4" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="0" />
                  </Metrics>
                  <Members>
                    <Member Name="TestDelegate(object, IntPtr)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="Invoke() : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="BeginInvoke(AsyncCallback, object) : IAsyncResult">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="EndInvoke(IAsyncResult) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="Assert">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="87" />
                    <Metric Name="CyclomaticComplexity" Value="303" />
                    <Metric Name="ClassCoupling" Value="31" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="493" />
                  </Metrics>
                  <Members>
                    <Member Name="Assert()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Counter.get() : int">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="IncrementAssertCount() : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Equals(object, object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ReferenceEquals(object, object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AssertDoublesAreEqual(double, double, double, string, object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="67" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="7" />
                      </Metrics>
                    </Member>
                    <Member Name="Pass(string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="69" />
                        <Metric Name="CyclomaticComplexity" Value="4" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="6" />
                      </Metrics>
                    </Member>
                    <Member Name="Pass(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Pass() : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Fail(string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="69" />
                        <Metric Name="CyclomaticComplexity" Value="4" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="6" />
                      </Metrics>
                    </Member>
                    <Member Name="Fail(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Fail() : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Ignore(string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="69" />
                        <Metric Name="CyclomaticComplexity" Value="4" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="6" />
                      </Metrics>
                    </Member>
                    <Member Name="Ignore(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Ignore() : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Inconclusive(string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="69" />
                        <Metric Name="CyclomaticComplexity" Value="4" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="6" />
                      </Metrics>
                    </Member>
                    <Member Name="Inconclusive(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Inconclusive() : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="That(object, IResolveConstraint) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="That(object, IResolveConstraint, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="That(object, IResolveConstraint, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="72" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="6" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                    <Member Name="That(ActualValueDelegate, IResolveConstraint) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="That(ActualValueDelegate, IResolveConstraint, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="That(ActualValueDelegate, IResolveConstraint, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="72" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="7" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                    <Member Name="That&lt;T&gt;(ref T, IResolveConstraint) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="That&lt;T&gt;(ref T, IResolveConstraint, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="That&lt;T&gt;(ref T, IResolveConstraint, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="72" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="6" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                    <Member Name="That(bool, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="That(bool, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="That(bool) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="That(TestDelegate, IResolveConstraint) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Throws(IResolveConstraint, TestDelegate, string, params object[]) : Exception">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="74" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                    <Member Name="Throws(IResolveConstraint, TestDelegate, string) : Exception">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Throws(IResolveConstraint, TestDelegate) : Exception">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Throws(Type, TestDelegate, string, params object[]) : Exception">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Throws(Type, TestDelegate, string) : Exception">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Throws(Type, TestDelegate) : Exception">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Throws&lt;T&gt;(TestDelegate, string, params object[]) : T">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Throws&lt;T&gt;(TestDelegate, string) : T">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Throws&lt;T&gt;(TestDelegate) : T">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Catch(TestDelegate, string, params object[]) : Exception">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Catch(TestDelegate, string) : Exception">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Catch(TestDelegate) : Exception">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Catch(Type, TestDelegate, string, params object[]) : Exception">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Catch(Type, TestDelegate, string) : Exception">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Catch(Type, TestDelegate) : Exception">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Catch&lt;T&gt;(TestDelegate, string, params object[]) : T">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Catch&lt;T&gt;(TestDelegate, string) : T">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Catch&lt;T&gt;(TestDelegate) : T">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="DoesNotThrow(TestDelegate, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="73" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="5" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                    <Member Name="DoesNotThrow(TestDelegate, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="DoesNotThrow(TestDelegate) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="True(bool, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="True(bool, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="True(bool) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsTrue(bool, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsTrue(bool, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsTrue(bool) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="False(bool, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="False(bool, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="False(bool) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsFalse(bool, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsFalse(bool, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsFalse(bool) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="NotNull(object, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="NotNull(object, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="NotNull(object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotNull(object, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotNull(object, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotNull(object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Null(object, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Null(object, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Null(object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNull(object, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNull(object, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNull(object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNaN(double, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNaN(double, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNaN(double) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNaN(double?, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNaN(double?, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNaN(double?) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsEmpty(string, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsEmpty(string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsEmpty(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsEmpty(ICollection, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsEmpty(ICollection, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsEmpty(ICollection) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotEmpty(string, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotEmpty(string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotEmpty(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotEmpty(ICollection, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotEmpty(ICollection, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotEmpty(ICollection) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNullOrEmpty(string, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNullOrEmpty(string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNullOrEmpty(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotNullOrEmpty(string, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotNullOrEmpty(string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotNullOrEmpty(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsAssignableFrom(Type, object, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsAssignableFrom(Type, object, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsAssignableFrom(Type, object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsAssignableFrom&lt;T&gt;(object, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="IsAssignableFrom&lt;T&gt;(object, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="IsAssignableFrom&lt;T&gt;(object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotAssignableFrom(Type, object, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotAssignableFrom(Type, object, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotAssignableFrom(Type, object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotAssignableFrom&lt;T&gt;(object, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotAssignableFrom&lt;T&gt;(object, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotAssignableFrom&lt;T&gt;(object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="IsInstanceOf(Type, object, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsInstanceOf(Type, object, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsInstanceOf(Type, object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsInstanceOfType(Type, object, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsInstanceOfType(Type, object, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsInstanceOfType(Type, object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsInstanceOf&lt;T&gt;(object, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="IsInstanceOf&lt;T&gt;(object, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="IsInstanceOf&lt;T&gt;(object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotInstanceOf(Type, object, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotInstanceOf(Type, object, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotInstanceOf(Type, object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotInstanceOfType(Type, object, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotInstanceOfType(Type, object, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotInstanceOfType(Type, object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotInstanceOf&lt;T&gt;(object, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotInstanceOf&lt;T&gt;(object, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotInstanceOf&lt;T&gt;(object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(int, int, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(int, int, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(int, int) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(long, long, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(long, long, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(long, long) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(uint, uint, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(uint, uint, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(uint, uint) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(ulong, ulong, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(ulong, ulong, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(ulong, ulong) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(decimal, decimal, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(decimal, decimal, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(decimal, decimal) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(double, double, double, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(double, double, double, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(double, double, double) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(double, double?, double, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(double, double?, double, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(double, double?, double) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(object, object, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(object, object, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(object, object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(int, int, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(int, int, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(int, int) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(long, long, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(long, long, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(long, long) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(uint, uint, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(uint, uint, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(uint, uint) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(ulong, ulong, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(ulong, ulong, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(ulong, ulong) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(decimal, decimal, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(decimal, decimal, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(decimal, decimal) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(float, float, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(float, float, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(float, float) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(double, double, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(double, double, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(double, double) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(object, object, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(object, object, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(object, object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreSame(object, object, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreSame(object, object, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreSame(object, object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotSame(object, object, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotSame(object, object, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotSame(object, object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Greater(int, int, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Greater(int, int, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Greater(int, int) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Greater(uint, uint, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Greater(uint, uint, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Greater(uint, uint) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Greater(long, long, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Greater(long, long, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Greater(long, long) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Greater(ulong, ulong, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Greater(ulong, ulong, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Greater(ulong, ulong) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Greater(decimal, decimal, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Greater(decimal, decimal, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Greater(decimal, decimal) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Greater(double, double, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Greater(double, double, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Greater(double, double) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Greater(float, float, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Greater(float, float, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Greater(float, float) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Greater(IComparable, IComparable, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Greater(IComparable, IComparable, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Greater(IComparable, IComparable) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Less(int, int, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Less(int, int, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Less(int, int) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Less(uint, uint, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Less(uint, uint, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Less(uint, uint) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Less(long, long, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Less(long, long, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Less(long, long) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Less(ulong, ulong, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Less(ulong, ulong, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Less(ulong, ulong) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Less(decimal, decimal, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Less(decimal, decimal, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Less(decimal, decimal) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Less(double, double, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Less(double, double, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Less(double, double) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Less(float, float, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Less(float, float, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Less(float, float) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Less(IComparable, IComparable, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Less(IComparable, IComparable, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Less(IComparable, IComparable) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="GreaterOrEqual(int, int, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="GreaterOrEqual(int, int, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="GreaterOrEqual(int, int) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="GreaterOrEqual(uint, uint, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="GreaterOrEqual(uint, uint, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="GreaterOrEqual(uint, uint) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="GreaterOrEqual(long, long, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="GreaterOrEqual(long, long, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="GreaterOrEqual(long, long) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="GreaterOrEqual(ulong, ulong, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="GreaterOrEqual(ulong, ulong, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="GreaterOrEqual(ulong, ulong) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="GreaterOrEqual(decimal, decimal, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="GreaterOrEqual(decimal, decimal, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="GreaterOrEqual(decimal, decimal) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="GreaterOrEqual(double, double, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="GreaterOrEqual(double, double, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="GreaterOrEqual(double, double) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="GreaterOrEqual(float, float, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="GreaterOrEqual(float, float, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="GreaterOrEqual(float, float) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="GreaterOrEqual(IComparable, IComparable, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="GreaterOrEqual(IComparable, IComparable, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="GreaterOrEqual(IComparable, IComparable) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="LessOrEqual(int, int, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="LessOrEqual(int, int, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="LessOrEqual(int, int) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="LessOrEqual(uint, uint, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="LessOrEqual(uint, uint, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="LessOrEqual(uint, uint) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="LessOrEqual(long, long, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="LessOrEqual(long, long, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="LessOrEqual(long, long) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="LessOrEqual(ulong, ulong, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="LessOrEqual(ulong, ulong, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="LessOrEqual(ulong, ulong) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="LessOrEqual(decimal, decimal, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="LessOrEqual(decimal, decimal, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="LessOrEqual(decimal, decimal) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="LessOrEqual(double, double, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="LessOrEqual(double, double, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="LessOrEqual(double, double) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="LessOrEqual(float, float, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="LessOrEqual(float, float, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="LessOrEqual(float, float) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="LessOrEqual(IComparable, IComparable, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="LessOrEqual(IComparable, IComparable, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="LessOrEqual(IComparable, IComparable) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Contains(object, ICollection, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Contains(object, ICollection, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Contains(object, ICollection) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Assert()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="AssertionHelper">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="89" />
                    <Metric Name="CyclomaticComplexity" Value="15" />
                    <Metric Name="ClassCoupling" Value="8" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="15" />
                  </Metrics>
                  <Members>
                    <Member Name="Expect(object, IResolveConstraint) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Expect(object, IResolveConstraint, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Expect(object, IResolveConstraint, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Expect(ActualValueDelegate, IResolveConstraint) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Expect(ActualValueDelegate, IResolveConstraint, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Expect(ActualValueDelegate, IResolveConstraint, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Expect&lt;T&gt;(ref T, IResolveConstraint) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Expect&lt;T&gt;(ref T, IResolveConstraint, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Expect&lt;T&gt;(ref T, IResolveConstraint, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Expect(bool, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Expect(bool, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Expect(bool) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Expect(TestDelegate, IResolveConstraint) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Map(ICollection) : ListMapper">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AssertionHelper()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="Assume">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="88" />
                    <Metric Name="CyclomaticComplexity" Value="19" />
                    <Metric Name="ClassCoupling" Value="11" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="25" />
                  </Metrics>
                  <Members>
                    <Member Name="Equals(object, object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ReferenceEquals(object, object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="That(object, IResolveConstraint) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="That(object, IResolveConstraint, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="That(object, IResolveConstraint, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="72" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="6" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                    <Member Name="That(ActualValueDelegate, IResolveConstraint) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="That(ActualValueDelegate, IResolveConstraint, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="That(ActualValueDelegate, IResolveConstraint, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="72" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="7" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                    <Member Name="That&lt;T&gt;(ref T, IResolveConstraint) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="That&lt;T&gt;(ref T, IResolveConstraint, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="That&lt;T&gt;(ref T, IResolveConstraint, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="72" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="6" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                    <Member Name="That(bool, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="That(bool, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="That(bool) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="That(TestDelegate, IResolveConstraint) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Assume()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="CollectionAssert">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="88" />
                    <Metric Name="CyclomaticComplexity" Value="54" />
                    <Metric Name="ClassCoupling" Value="16" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="63" />
                  </Metrics>
                  <Members>
                    <Member Name="Equals(object, object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ReferenceEquals(object, object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AllItemsAreInstancesOfType(IEnumerable, Type) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AllItemsAreInstancesOfType(IEnumerable, Type, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AllItemsAreInstancesOfType(IEnumerable, Type, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="5" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AllItemsAreNotNull(IEnumerable) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AllItemsAreNotNull(IEnumerable, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AllItemsAreNotNull(IEnumerable, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="5" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AllItemsAreUnique(IEnumerable) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AllItemsAreUnique(IEnumerable, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AllItemsAreUnique(IEnumerable, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(IEnumerable, IEnumerable) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(IEnumerable, IEnumerable, IComparer) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(IEnumerable, IEnumerable, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(IEnumerable, IEnumerable, IComparer, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(IEnumerable, IEnumerable, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(IEnumerable, IEnumerable, IComparer, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEquivalent(IEnumerable, IEnumerable) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEquivalent(IEnumerable, IEnumerable, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEquivalent(IEnumerable, IEnumerable, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(IEnumerable, IEnumerable) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(IEnumerable, IEnumerable, IComparer) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(IEnumerable, IEnumerable, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(IEnumerable, IEnumerable, IComparer, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(IEnumerable, IEnumerable, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(IEnumerable, IEnumerable, IComparer, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="5" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEquivalent(IEnumerable, IEnumerable) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEquivalent(IEnumerable, IEnumerable, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEquivalent(IEnumerable, IEnumerable, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Contains(IEnumerable, object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Contains(IEnumerable, object, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Contains(IEnumerable, object, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="DoesNotContain(IEnumerable, object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="DoesNotContain(IEnumerable, object, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="DoesNotContain(IEnumerable, object, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotSubsetOf(IEnumerable, IEnumerable) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotSubsetOf(IEnumerable, IEnumerable, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotSubsetOf(IEnumerable, IEnumerable, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="IsSubsetOf(IEnumerable, IEnumerable) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsSubsetOf(IEnumerable, IEnumerable, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsSubsetOf(IEnumerable, IEnumerable, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsEmpty(IEnumerable, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsEmpty(IEnumerable, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsEmpty(IEnumerable) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotEmpty(IEnumerable, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotEmpty(IEnumerable, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotEmpty(IEnumerable) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsOrdered(IEnumerable, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsOrdered(IEnumerable, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsOrdered(IEnumerable) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsOrdered(IEnumerable, IComparer, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="IsOrdered(IEnumerable, IComparer, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsOrdered(IEnumerable, IComparer) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="CollectionAssert()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="Contains">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="91" />
                    <Metric Name="CyclomaticComplexity" Value="3" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="3" />
                  </Metrics>
                  <Members>
                    <Member Name="Substring(string) : SubstringConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Item(object) : CollectionContainsConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Contains()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="DirectoryAssert">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="87" />
                    <Metric Name="CyclomaticComplexity" Value="51" />
                    <Metric Name="ClassCoupling" Value="11" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="74" />
                  </Metrics>
                  <Members>
                    <Member Name="Equals(object, object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ReferenceEquals(object, object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="DirectoryAssert()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(DirectoryInfo, DirectoryInfo, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(DirectoryInfo, DirectoryInfo, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(DirectoryInfo, DirectoryInfo) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(string, string, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="81" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(string, string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(DirectoryInfo, DirectoryInfo, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(DirectoryInfo, DirectoryInfo, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(DirectoryInfo, DirectoryInfo) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(string, string, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="81" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(string, string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsEmpty(DirectoryInfo, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsEmpty(DirectoryInfo, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsEmpty(DirectoryInfo) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsEmpty(string, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsEmpty(string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsEmpty(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotEmpty(DirectoryInfo, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotEmpty(DirectoryInfo, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotEmpty(DirectoryInfo) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotEmpty(string, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotEmpty(string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotEmpty(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsWithin(DirectoryInfo, DirectoryInfo, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="68" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="6" />
                      </Metrics>
                    </Member>
                    <Member Name="IsWithin(DirectoryInfo, DirectoryInfo, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="68" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="6" />
                      </Metrics>
                    </Member>
                    <Member Name="IsWithin(DirectoryInfo, DirectoryInfo) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="68" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="6" />
                      </Metrics>
                    </Member>
                    <Member Name="IsWithin(string, string, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsWithin(string, string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsWithin(string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotWithin(DirectoryInfo, DirectoryInfo, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="68" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="6" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotWithin(DirectoryInfo, DirectoryInfo, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="68" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="6" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotWithin(DirectoryInfo, DirectoryInfo) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="68" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="6" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotWithin(string, string, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotWithin(string, string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsNotWithin(string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="FileAssert">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="81" />
                    <Metric Name="CyclomaticComplexity" Value="29" />
                    <Metric Name="ClassCoupling" Value="9" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="42" />
                  </Metrics>
                  <Members>
                    <Member Name="Equals(object, object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ReferenceEquals(object, object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="FileAssert()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(Stream, Stream, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(Stream, Stream, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(Stream, Stream) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(FileInfo, FileInfo, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="68" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="6" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(FileInfo, FileInfo, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(FileInfo, FileInfo) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(string, string, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="68" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="6" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(string, string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(Stream, Stream, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(Stream, Stream, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(Stream, Stream) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(FileInfo, FileInfo, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="68" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="6" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(FileInfo, FileInfo, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(FileInfo, FileInfo) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(string, string, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="68" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="6" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(string, string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqual(string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="GlobalSettings">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="96" />
                    <Metric Name="CyclomaticComplexity" Value="2" />
                    <Metric Name="ClassCoupling" Value="0" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="2" />
                  </Metrics>
                  <Members>
                    <Member Name="GlobalSettings()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="GlobalSettings()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="Has">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="89" />
                    <Metric Name="CyclomaticComplexity" Value="13" />
                    <Metric Name="ClassCoupling" Value="4" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="13" />
                  </Metrics>
                  <Members>
                    <Member Name="No.get() : ConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="All.get() : ConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Some.get() : ConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="None.get() : ConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Property(string) : ResolvableConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Length.get() : ResolvableConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Count.get() : ResolvableConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Message.get() : ResolvableConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="InnerException.get() : ResolvableConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Attribute(Type) : ResolvableConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Attribute&lt;T&gt;() : ResolvableConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Member(object) : CollectionContainsConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Has()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="IExpectException">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="100" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="1" />
                    <Metric Name="DepthOfInheritance" Value="0" />
                    <Metric Name="LinesOfCode" Value="0" />
                  </Metrics>
                  <Members>
                    <Member Name="HandleException(Exception) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="Is">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="88" />
                    <Metric Name="CyclomaticComplexity" Value="40" />
                    <Metric Name="ClassCoupling" Value="34" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="40" />
                  </Metrics>
                  <Members>
                    <Member Name="Not.get() : ConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="All.get() : ConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Null.get() : NullConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="True.get() : TrueConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="False.get() : FalseConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="NaN.get() : NaNConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Empty.get() : EmptyConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Unique.get() : UniqueItemsConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="BinarySerializable.get() : BinarySerializableConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="XmlSerializable.get() : XmlSerializableConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="EqualTo(object) : EqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="SameAs(object) : SameAsConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="GreaterThan(object) : GreaterThanConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="GreaterThanOrEqualTo(object) : GreaterThanOrEqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AtLeast(object) : GreaterThanOrEqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="LessThan(object) : LessThanConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="LessThanOrEqualTo(object) : LessThanOrEqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AtMost(object) : LessThanOrEqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="TypeOf(Type) : ExactTypeConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="TypeOf&lt;T&gt;() : ExactTypeConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="InstanceOf(Type) : InstanceOfTypeConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="InstanceOf&lt;T&gt;() : InstanceOfTypeConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="InstanceOfType(Type) : InstanceOfTypeConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="InstanceOfType&lt;T&gt;() : InstanceOfTypeConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AssignableFrom(Type) : AssignableFromConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AssignableFrom&lt;T&gt;() : AssignableFromConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AssignableTo(Type) : AssignableToConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AssignableTo&lt;T&gt;() : AssignableToConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="EquivalentTo(IEnumerable) : CollectionEquivalentConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="SubsetOf(IEnumerable) : CollectionSubsetConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Ordered.get() : CollectionOrderedConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="StringContaining(string) : SubstringConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="StringStarting(string) : StartsWithConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="StringEnding(string) : EndsWithConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="StringMatching(string) : RegexConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="SamePath(string) : SamePathConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="SubPath(string) : SubPathConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="SamePathOrUnder(string) : SamePathOrUnderConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="InRange(IComparable, IComparable) : RangeConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Is()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="Iz">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="100" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="1" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="1" />
                  </Metrics>
                  <Members>
                    <Member Name="Iz()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="List">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="93" />
                    <Metric Name="CyclomaticComplexity" Value="2" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="2" />
                  </Metrics>
                  <Members>
                    <Member Name="Map(ICollection) : ListMapper">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="List()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="ListMapper">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="67" />
                    <Metric Name="CyclomaticComplexity" Value="5" />
                    <Metric Name="ClassCoupling" Value="8" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="13" />
                  </Metrics>
                  <Members>
                    <Member Name="ListMapper(ICollection)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Property(string) : ICollection">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="58" />
                        <Metric Name="CyclomaticComplexity" Value="4" />
                        <Metric Name="ClassCoupling" Value="8" />
                        <Metric Name="LinesOfCode" Value="12" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="Randomizer">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="76" />
                    <Metric Name="CyclomaticComplexity" Value="13" />
                    <Metric Name="ClassCoupling" Value="4" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="28" />
                  </Metrics>
                  <Members>
                    <Member Name="RandomSeed.get() : int">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="GetRandomizer(MemberInfo) : Randomizer">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="71" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="5" />
                      </Metrics>
                    </Member>
                    <Member Name="GetRandomizer(ParameterInfo) : Randomizer">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Randomizer()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Randomizer(int)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="98" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="GetDoubles(int) : double[]">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="71" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="5" />
                      </Metrics>
                    </Member>
                    <Member Name="GetDoubles(double, double, int) : double[]">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="66" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="7" />
                      </Metrics>
                    </Member>
                    <Member Name="GetInts(int, int, int) : int[]">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="69" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="6" />
                      </Metrics>
                    </Member>
                    <Member Name="Randomizer()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="SpecialValue">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="100" />
                    <Metric Name="CyclomaticComplexity" Value="0" />
                    <Metric Name="ClassCoupling" Value="0" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="0" />
                  </Metrics>
                  <Members />
                </Type>
                <Type Name="StringAssert">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="89" />
                    <Metric Name="CyclomaticComplexity" Value="33" />
                    <Metric Name="ClassCoupling" Value="9" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="39" />
                  </Metrics>
                  <Members>
                    <Member Name="Equals(object, object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ReferenceEquals(object, object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Contains(string, string, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Contains(string, string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Contains(string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="DoesNotContain(string, string, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="DoesNotContain(string, string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="DoesNotContain(string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="StartsWith(string, string, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="StartsWith(string, string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="StartsWith(string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="DoesNotStartWith(string, string, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="DoesNotStartWith(string, string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="DoesNotStartWith(string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="EndsWith(string, string, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="EndsWith(string, string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="EndsWith(string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="DoesNotEndWith(string, string, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="DoesNotEndWith(string, string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="DoesNotEndWith(string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqualIgnoringCase(string, string, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqualIgnoringCase(string, string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqualIgnoringCase(string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqualIgnoringCase(string, string, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqualIgnoringCase(string, string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AreNotEqualIgnoringCase(string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsMatch(string, string, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsMatch(string, string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsMatch(string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="DoesNotMatch(string, string, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="DoesNotMatch(string, string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="DoesNotMatch(string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="StringAssert()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="TestCaseData">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="81" />
                    <Metric Name="CyclomaticComplexity" Value="29" />
                    <Metric Name="ClassCoupling" Value="6" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="54" />
                  </Metrics>
                  <Members>
                    <Member Name="TestCaseData(params object[])">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="75" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                    <Member Name="TestCaseData(object)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="79" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="TestCaseData(object, object)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="78" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="TestCaseData(object, object, object)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="75" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                    <Member Name="Arguments.get() : object[]">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Result.get() : object">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ExpectedException.get() : Type">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ExpectedExceptionName.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="TestName.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Description.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Ignored.get() : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IgnoreReason.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Categories.get() : IList">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="71" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="5" />
                      </Metrics>
                    </Member>
                    <Member Name="Properties.get() : IDictionary">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="75" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                    <Member Name="Returns(object) : TestCaseData">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Throws(Type) : TestCaseData">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Throws(string) : TestCaseData">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="SetName(string) : TestCaseData">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="SetDescription(string) : TestCaseData">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="SetCategory(string) : TestCaseData">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="SetProperty(string, string) : TestCaseData">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="SetProperty(string, int) : TestCaseData">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="SetProperty(string, double) : TestCaseData">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Ignore() : TestCaseData">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Ignore(string) : TestCaseData">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="TestCaseData()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="TestContext">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="81" />
                    <Metric Name="CyclomaticComplexity" Value="7" />
                    <Metric Name="ClassCoupling" Value="4" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="13" />
                  </Metrics>
                  <Members>
                    <Member Name="TestContext(IDictionary)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="CurrentContext.get() : TestContext">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Test.get() : TestContext.TestAdapter">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="75" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                    <Member Name="Result.get() : TestContext.ResultAdapter">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="75" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                    <Member Name="TestDirectory.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="TestContext.TestAdapter">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="89" />
                    <Metric Name="CyclomaticComplexity" Value="4" />
                    <Metric Name="ClassCoupling" Value="1" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="7" />
                  </Metrics>
                  <Members>
                    <Member Name="TestAdapter(IDictionary)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Name.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="FullName.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Properties.get() : IDictionary">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="TestContext.ResultAdapter">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="82" />
                    <Metric Name="CyclomaticComplexity" Value="7" />
                    <Metric Name="ClassCoupling" Value="3" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="7" />
                  </Metrics>
                  <Members>
                    <Member Name="ResultAdapter(IDictionary)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="State.get() : TestState">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Status.get() : TestStatus">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="74" />
                        <Metric Name="CyclomaticComplexity" Value="5" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="TestState">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="100" />
                    <Metric Name="CyclomaticComplexity" Value="0" />
                    <Metric Name="ClassCoupling" Value="0" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="0" />
                  </Metrics>
                  <Members />
                </Type>
                <Type Name="TestStatus">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="100" />
                    <Metric Name="CyclomaticComplexity" Value="0" />
                    <Metric Name="ClassCoupling" Value="0" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="0" />
                  </Metrics>
                  <Members />
                </Type>
                <Type Name="Text">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="88" />
                    <Metric Name="CyclomaticComplexity" Value="10" />
                    <Metric Name="ClassCoupling" Value="6" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="14" />
                  </Metrics>
                  <Members>
                    <Member Name="All.get() : ConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Contains(string) : SubstringConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="DoesNotContain(string) : SubstringConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="StartsWith(string) : StartsWithConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="DoesNotStartWith(string) : StartsWithConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="EndsWith(string) : EndsWithConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="DoesNotEndWith(string) : EndsWithConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(string) : RegexConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="DoesNotMatch(string) : RegexConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Text()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="TextMessageWriter">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="69" />
                    <Metric Name="CyclomaticComplexity" Value="76" />
                    <Metric Name="ClassCoupling" Value="15" />
                    <Metric Name="DepthOfInheritance" Value="5" />
                    <Metric Name="LinesOfCode" Value="164" />
                  </Metrics>
                  <Members>
                    <Member Name="TextMessageWriter()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="TextMessageWriter(string, params object[])">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="74" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                    <Member Name="MaxLineLength.get() : int">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="MaxLineLength.set(int) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteMessageLine(int, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="64" />
                        <Metric Name="CyclomaticComplexity" Value="5" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="9" />
                      </Metrics>
                    </Member>
                    <Member Name="DisplayDifferences(Constraint) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="DisplayDifferences(object, object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="DisplayDifferences(object, object, Tolerance) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="86" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="DisplayStringDifferences(string, string, int, bool, bool) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="59" />
                        <Metric Name="CyclomaticComplexity" Value="4" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="12" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteConnector(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="WritePredicate(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteModifier(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteExpectedValue(object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="98" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteActualValue(object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="98" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteValue(object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="48" />
                        <Metric Name="CyclomaticComplexity" Value="11" />
                        <Metric Name="ClassCoupling" Value="7" />
                        <Metric Name="LinesOfCode" Value="29" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteCollectionElements(ICollection, int, int) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="53" />
                        <Metric Name="CyclomaticComplexity" Value="8" />
                        <Metric Name="ClassCoupling" Value="5" />
                        <Metric Name="LinesOfCode" Value="19" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteArray(Array) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="45" />
                        <Metric Name="CyclomaticComplexity" Value="12" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="33" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteString(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="78" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteChar(char) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDouble(double) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="63" />
                        <Metric Name="CyclomaticComplexity" Value="4" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="9" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteFloat(float) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="63" />
                        <Metric Name="CyclomaticComplexity" Value="4" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="9" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDecimal(decimal) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDateTime(DateTime) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteExpectedLine(Constraint) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="86" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteExpectedLine(object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteExpectedLine(object, Tolerance) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="71" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="5" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteActualLine(Constraint) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="86" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteActualLine(object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="86" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteCaretLine(int) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="78" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="TextMessageWriter()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="66" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="6" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="Throws">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="89" />
                    <Metric Name="CyclomaticComplexity" Value="11" />
                    <Metric Name="ClassCoupling" Value="11" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="11" />
                  </Metrics>
                  <Members>
                    <Member Name="Exception.get() : ResolvableConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="89" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="InnerException.get() : ResolvableConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="TargetInvocationException.get() : ExactTypeConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ArgumentException.get() : ExactTypeConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="InvalidOperationException.get() : ExactTypeConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Nothing.get() : ThrowsNothingConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="TypeOf(Type) : ExactTypeConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="TypeOf&lt;T&gt;() : ExactTypeConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="InstanceOf(Type) : InstanceOfTypeConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="InstanceOf&lt;T&gt;() : InstanceOfTypeConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Throws()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
              </Types>
            </Namespace>
            <Namespace Name="NUnit.Framework.Constraints">
              <Metrics>
                <Metric Name="MaintainabilityIndex" Value="82" />
                <Metric Name="CyclomaticComplexity" Value="1,020" />
                <Metric Name="ClassCoupling" Value="155" />
                <Metric Name="DepthOfInheritance" Value="4" />
                <Metric Name="LinesOfCode" Value="1,981" />
              </Metrics>
              <Types>
                <Type Name="IResolveConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="100" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="1" />
                    <Metric Name="DepthOfInheritance" Value="0" />
                    <Metric Name="LinesOfCode" Value="0" />
                  </Metrics>
                  <Members>
                    <Member Name="Resolve() : Constraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="Constraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="76" />
                    <Metric Name="CyclomaticComplexity" Value="41" />
                    <Metric Name="ClassCoupling" Value="15" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="76" />
                  </Metrics>
                  <Members>
                    <Member Name="Constraint()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Constraint(object)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Constraint(object, object)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="78" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="SetBuilder(ConstraintBuilder) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="DisplayName.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="57" />
                        <Metric Name="CyclomaticComplexity" Value="5" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="14" />
                      </Metrics>
                    </Member>
                    <Member Name="DisplayName.set(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteMessageTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="98" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(ActualValueDelegate) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches&lt;T&gt;(ref T) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteActualValueTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ToString() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="78" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="GetStringRepresentation() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="64" />
                        <Metric Name="CyclomaticComplexity" Value="4" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="8" />
                      </Metrics>
                    </Member>
                    <Member Name="_displayable(object) : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="66" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="7" />
                      </Metrics>
                    </Member>
                    <Member Name="operator &amp;(Constraint, Constraint) : Constraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="77" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="operator |(Constraint, Constraint) : Constraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="77" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="operator !(Constraint) : Constraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="77" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="And.get() : ConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="70" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="5" />
                      </Metrics>
                    </Member>
                    <Member Name="With.get() : ConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Or.get() : ConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="70" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="5" />
                      </Metrics>
                    </Member>
                    <Member Name="After(int) : DelayedConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="79" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="After(int, int) : DelayedConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="78" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="IResolveConstraint.Resolve() : Constraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Constraint()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="Constraint.UnsetObject">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="94" />
                    <Metric Name="CyclomaticComplexity" Value="2" />
                    <Metric Name="ClassCoupling" Value="0" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="2" />
                  </Metrics>
                  <Members>
                    <Member Name="ToString() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="UnsetObject()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="AttributeExistsConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="73" />
                    <Metric Name="CyclomaticComplexity" Value="5" />
                    <Metric Name="ClassCoupling" Value="6" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="13" />
                  </Metrics>
                  <Members>
                    <Member Name="AttributeExistsConstraint(Type)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="73" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="66" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="7" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="PrefixConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="78" />
                    <Metric Name="CyclomaticComplexity" Value="2" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="3" />
                  </Metrics>
                  <Members>
                    <Member Name="PrefixConstraint(IResolveConstraint)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="78" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="AttributeConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="70" />
                    <Metric Name="CyclomaticComplexity" Value="10" />
                    <Metric Name="ClassCoupling" Value="8" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="25" />
                  </Metrics>
                  <Members>
                    <Member Name="AttributeConstraint(Type, Constraint)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="73" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="5" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="59" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="6" />
                        <Metric Name="LinesOfCode" Value="12" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="68" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="5" />
                        <Metric Name="LinesOfCode" Value="6" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteActualValueTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="GetStringRepresentation() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="BasicConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="74" />
                    <Metric Name="CyclomaticComplexity" Value="7" />
                    <Metric Name="ClassCoupling" Value="3" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="12" />
                  </Metrics>
                  <Members>
                    <Member Name="BasicConstraint(object, string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="64" />
                        <Metric Name="CyclomaticComplexity" Value="5" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="9" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="NullConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="95" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="1" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="1" />
                  </Metrics>
                  <Members>
                    <Member Name="NullConstraint()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="TrueConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="95" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="1" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="1" />
                  </Metrics>
                  <Members>
                    <Member Name="TrueConstraint()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="FalseConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="95" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="1" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="1" />
                  </Metrics>
                  <Members>
                    <Member Name="FalseConstraint()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="NaNConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="82" />
                    <Metric Name="CyclomaticComplexity" Value="6" />
                    <Metric Name="ClassCoupling" Value="3" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="7" />
                  </Metrics>
                  <Members>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="71" />
                        <Metric Name="CyclomaticComplexity" Value="4" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="5" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="NaNConstraint()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="BinaryConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="84" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="1" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="2" />
                  </Metrics>
                  <Members>
                    <Member Name="BinaryConstraint(Constraint, Constraint)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="AndConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="77" />
                    <Metric Name="CyclomaticComplexity" Value="8" />
                    <Metric Name="ClassCoupling" Value="4" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="14" />
                  </Metrics>
                  <Members>
                    <Member Name="AndConstraint(Constraint, Constraint)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="69" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="6" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteActualValueTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="73" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="5" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="AndConstraint.FailurePoint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="100" />
                    <Metric Name="CyclomaticComplexity" Value="0" />
                    <Metric Name="ClassCoupling" Value="0" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="0" />
                  </Metrics>
                  <Members />
                </Type>
                <Type Name="OrConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="82" />
                    <Metric Name="CyclomaticComplexity" Value="4" />
                    <Metric Name="ClassCoupling" Value="3" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="7" />
                  </Metrics>
                  <Members>
                    <Member Name="OrConstraint(Constraint, Constraint)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="75" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="CollectionConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="81" />
                    <Metric Name="CyclomaticComplexity" Value="7" />
                    <Metric Name="ClassCoupling" Value="5" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="12" />
                  </Metrics>
                  <Members>
                    <Member Name="CollectionConstraint()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="CollectionConstraint(object)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="98" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsEmpty(IEnumerable) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="70" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="5" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="70" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="5" />
                      </Metrics>
                    </Member>
                    <Member Name="doMatch(IEnumerable) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="CollectionItemsEqualConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="88" />
                    <Metric Name="CyclomaticComplexity" Value="10" />
                    <Metric Name="ClassCoupling" Value="10" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="18" />
                  </Metrics>
                  <Members>
                    <Member Name="CollectionItemsEqualConstraint()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="CollectionItemsEqualConstraint(object)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IgnoreCase.get() : CollectionItemsEqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Using(IComparer) : CollectionItemsEqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Using&lt;T&gt;(IComparer&lt;T&gt;) : CollectionItemsEqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Using&lt;T&gt;(Comparison&lt;T&gt;) : CollectionItemsEqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Using(IEqualityComparer) : CollectionItemsEqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Using&lt;T&gt;(IEqualityComparer&lt;T&gt;) : CollectionItemsEqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="ItemsEqual(object, object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Tally(IEnumerable) : CollectionTally">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="EmptyCollectionConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="92" />
                    <Metric Name="CyclomaticComplexity" Value="3" />
                    <Metric Name="ClassCoupling" Value="4" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="3" />
                  </Metrics>
                  <Members>
                    <Member Name="doMatch(IEnumerable) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="EmptyCollectionConstraint()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="UniqueItemsConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="69" />
                    <Metric Name="CyclomaticComplexity" Value="8" />
                    <Metric Name="ClassCoupling" Value="7" />
                    <Metric Name="DepthOfInheritance" Value="4" />
                    <Metric Name="LinesOfCode" Value="17" />
                  </Metrics>
                  <Members>
                    <Member Name="doMatch(IEnumerable) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="55" />
                        <Metric Name="CyclomaticComplexity" Value="6" />
                        <Metric Name="ClassCoupling" Value="5" />
                        <Metric Name="LinesOfCode" Value="15" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="UniqueItemsConstraint()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="CollectionContainsConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="73" />
                    <Metric Name="CyclomaticComplexity" Value="6" />
                    <Metric Name="ClassCoupling" Value="6" />
                    <Metric Name="DepthOfInheritance" Value="4" />
                    <Metric Name="LinesOfCode" Value="13" />
                  </Metrics>
                  <Members>
                    <Member Name="CollectionContainsConstraint(object)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="doMatch(IEnumerable) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="63" />
                        <Metric Name="CyclomaticComplexity" Value="4" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="9" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="CollectionEquivalentConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="73" />
                    <Metric Name="CyclomaticComplexity" Value="7" />
                    <Metric Name="ClassCoupling" Value="6" />
                    <Metric Name="DepthOfInheritance" Value="4" />
                    <Metric Name="LinesOfCode" Value="14" />
                  </Metrics>
                  <Members>
                    <Member Name="CollectionEquivalentConstraint(IEnumerable)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="doMatch(IEnumerable) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="62" />
                        <Metric Name="CyclomaticComplexity" Value="5" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="10" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="CollectionSubsetConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="83" />
                    <Metric Name="CyclomaticComplexity" Value="3" />
                    <Metric Name="ClassCoupling" Value="5" />
                    <Metric Name="DepthOfInheritance" Value="4" />
                    <Metric Name="LinesOfCode" Value="6" />
                  </Metrics>
                  <Members>
                    <Member Name="CollectionSubsetConstraint(IEnumerable)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="doMatch(IEnumerable) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="CollectionOrderedConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="67" />
                    <Metric Name="CyclomaticComplexity" Value="24" />
                    <Metric Name="ClassCoupling" Value="15" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="58" />
                  </Metrics>
                  <Members>
                    <Member Name="CollectionOrderedConstraint()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Descending.get() : CollectionOrderedConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Using(IComparer) : CollectionOrderedConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="77" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="Using&lt;T&gt;(IComparer&lt;T&gt;) : CollectionOrderedConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="77" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="Using&lt;T&gt;(Comparison&lt;T&gt;) : CollectionOrderedConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="77" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="By(string) : CollectionOrderedConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="doMatch(IEnumerable) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="47" />
                        <Metric Name="CyclomaticComplexity" Value="11" />
                        <Metric Name="ClassCoupling" Value="7" />
                        <Metric Name="LinesOfCode" Value="27" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="69" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="6" />
                      </Metrics>
                    </Member>
                    <Member Name="GetStringRepresentation() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="61" />
                        <Metric Name="CyclomaticComplexity" Value="4" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="10" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="CollectionTally">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="69" />
                    <Metric Name="CyclomaticComplexity" Value="12" />
                    <Metric Name="ClassCoupling" Value="5" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="27" />
                  </Metrics>
                  <Members>
                    <Member Name="CollectionTally(NUnitEqualityComparer, IEnumerable)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="64" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="5" />
                        <Metric Name="LinesOfCode" Value="8" />
                      </Metrics>
                    </Member>
                    <Member Name="Count.get() : int">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ItemsEqual(object, object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="TryRemove(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="65" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="8" />
                      </Metrics>
                    </Member>
                    <Member Name="TryRemove(IEnumerable) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="64" />
                        <Metric Name="CyclomaticComplexity" Value="4" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="8" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="ComparisonAdapter">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="91" />
                    <Metric Name="CyclomaticComplexity" Value="6" />
                    <Metric Name="ClassCoupling" Value="7" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="5" />
                  </Metrics>
                  <Members>
                    <Member Name="Default.get() : ComparisonAdapter">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="For(IComparer) : ComparisonAdapter">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="For&lt;T&gt;(IComparer&lt;T&gt;) : ComparisonAdapter">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="For&lt;T&gt;(Comparison&lt;T&gt;) : ComparisonAdapter">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Compare(object, object) : int">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="ComparisonAdapter()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="ComparisonAdapter.ComparerAdapter">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="91" />
                    <Metric Name="CyclomaticComplexity" Value="2" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="3" />
                  </Metrics>
                  <Members>
                    <Member Name="ComparerAdapter(IComparer)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Compare(object, object) : int">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="ComparisonAdapter.DefaultComparisonAdapter">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="95" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="1" />
                  </Metrics>
                  <Members>
                    <Member Name="DefaultComparisonAdapter()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="ComparisonAdapter.ComparerAdapter&lt;T&gt;">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="72" />
                    <Metric Name="CyclomaticComplexity" Value="4" />
                    <Metric Name="ClassCoupling" Value="4" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="9" />
                  </Metrics>
                  <Members>
                    <Member Name="ComparerAdapter(IComparer&lt;T&gt;)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Compare(object, object) : int">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="64" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="8" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="ComparisonAdapter.ComparisonAdapterForComparison&lt;T&gt;">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="72" />
                    <Metric Name="CyclomaticComplexity" Value="4" />
                    <Metric Name="ClassCoupling" Value="4" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="9" />
                  </Metrics>
                  <Members>
                    <Member Name="ComparisonAdapterForComparison(Comparison&lt;T&gt;)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Compare(object, object) : int">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="64" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="8" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="ComparisonConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="73" />
                    <Metric Name="CyclomaticComplexity" Value="13" />
                    <Metric Name="ClassCoupling" Value="7" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="26" />
                  </Metrics>
                  <Members>
                    <Member Name="ComparisonConstraint(object, bool, bool, bool, string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="68" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="6" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="59" />
                        <Metric Name="CyclomaticComplexity" Value="8" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="12" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Using(IComparer) : ComparisonConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Using&lt;T&gt;(IComparer&lt;T&gt;) : ComparisonConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Using&lt;T&gt;(Comparison&lt;T&gt;) : ComparisonConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="GreaterThanConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="85" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="1" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="2" />
                  </Metrics>
                  <Members>
                    <Member Name="GreaterThanConstraint(object)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="GreaterThanOrEqualConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="85" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="1" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="2" />
                  </Metrics>
                  <Members>
                    <Member Name="GreaterThanOrEqualConstraint(object)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="LessThanConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="85" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="1" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="2" />
                  </Metrics>
                  <Members>
                    <Member Name="LessThanConstraint(object)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="LessThanOrEqualConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="85" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="1" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="2" />
                  </Metrics>
                  <Members>
                    <Member Name="LessThanOrEqualConstraint(object)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="ActualValueDelegate">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="100" />
                    <Metric Name="CyclomaticComplexity" Value="4" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="0" />
                  </Metrics>
                  <Members>
                    <Member Name="ActualValueDelegate(object, IntPtr)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="Invoke() : object">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="BeginInvoke(AsyncCallback, object) : IAsyncResult">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="EndInvoke(IAsyncResult) : object">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="ConstraintBuilder">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="72" />
                    <Metric Name="CyclomaticComplexity" Value="15" />
                    <Metric Name="ClassCoupling" Value="6" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="34" />
                  </Metrics>
                  <Members>
                    <Member Name="ConstraintBuilder()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="IsResolvable.get() : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="78" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="Append(ConstraintOperator) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="69" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="6" />
                      </Metrics>
                    </Member>
                    <Member Name="Append(Constraint) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="72" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="5" />
                      </Metrics>
                    </Member>
                    <Member Name="SetTopOperatorRightContext(object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="66" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="7" />
                      </Metrics>
                    </Member>
                    <Member Name="ReduceOperatorStack(int) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="71" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="5" />
                      </Metrics>
                    </Member>
                    <Member Name="Resolve() : Constraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="68" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="5" />
                        <Metric Name="LinesOfCode" Value="6" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="ConstraintBuilder.OperatorStack">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="90" />
                    <Metric Name="CyclomaticComplexity" Value="5" />
                    <Metric Name="ClassCoupling" Value="3" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="6" />
                  </Metrics>
                  <Members>
                    <Member Name="OperatorStack(ConstraintBuilder)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Empty.get() : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Top.get() : ConstraintOperator">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Push(ConstraintOperator) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Pop() : ConstraintOperator">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="ConstraintBuilder.ConstraintStack">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="89" />
                    <Metric Name="CyclomaticComplexity" Value="5" />
                    <Metric Name="ClassCoupling" Value="3" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="9" />
                  </Metrics>
                  <Members>
                    <Member Name="ConstraintStack(ConstraintBuilder)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Empty.get() : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Top.get() : Constraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Push(Constraint) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Pop() : Constraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="ConstraintExpressionBase">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="89" />
                    <Metric Name="CyclomaticComplexity" Value="6" />
                    <Metric Name="ClassCoupling" Value="6" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="10" />
                  </Metrics>
                  <Members>
                    <Member Name="ConstraintExpressionBase()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ConstraintExpressionBase(ConstraintBuilder)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ToString() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Append(ConstraintOperator) : ConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Append(SelfResolvingOperator) : ResolvableConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Append(Constraint) : Constraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="ConstraintExpression">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="87" />
                    <Metric Name="CyclomaticComplexity" Value="61" />
                    <Metric Name="ClassCoupling" Value="48" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="109" />
                  </Metrics>
                  <Members>
                    <Member Name="ConstraintExpression()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ConstraintExpression(ConstraintBuilder)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="98" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Not.get() : ConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="No.get() : ConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="All.get() : ConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Some.get() : ConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="None.get() : ConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Property(string) : ResolvableConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Length.get() : ResolvableConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Count.get() : ResolvableConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Message.get() : ResolvableConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="InnerException.get() : ResolvableConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Attribute(Type) : ResolvableConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Attribute&lt;T&gt;() : ResolvableConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="With.get() : ConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(Constraint) : Constraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches&lt;T&gt;(Predicate&lt;T&gt;) : Constraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Null.get() : NullConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="True.get() : TrueConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="False.get() : FalseConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="NaN.get() : NaNConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Empty.get() : EmptyConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Unique.get() : UniqueItemsConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="BinarySerializable.get() : BinarySerializableConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="XmlSerializable.get() : XmlSerializableConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="EqualTo(object) : EqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="SameAs(object) : SameAsConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="GreaterThan(object) : GreaterThanConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="GreaterThanOrEqualTo(object) : GreaterThanOrEqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AtLeast(object) : GreaterThanOrEqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="LessThan(object) : LessThanConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="LessThanOrEqualTo(object) : LessThanOrEqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AtMost(object) : LessThanOrEqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="TypeOf(Type) : ExactTypeConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="TypeOf&lt;T&gt;() : ExactTypeConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="InstanceOf(Type) : InstanceOfTypeConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="InstanceOf&lt;T&gt;() : InstanceOfTypeConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="InstanceOfType(Type) : InstanceOfTypeConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="InstanceOfType&lt;T&gt;() : InstanceOfTypeConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AssignableFrom(Type) : AssignableFromConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AssignableFrom&lt;T&gt;() : AssignableFromConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AssignableTo(Type) : AssignableToConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AssignableTo&lt;T&gt;() : AssignableToConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="EquivalentTo(IEnumerable) : CollectionEquivalentConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="SubsetOf(IEnumerable) : CollectionSubsetConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Ordered.get() : CollectionOrderedConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Member(object) : CollectionContainsConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Contains(object) : CollectionContainsConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Contains(string) : ContainsConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="StringContaining(string) : SubstringConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="ContainsSubstring(string) : SubstringConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="StartsWith(string) : StartsWithConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="StringStarting(string) : StartsWithConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="EndsWith(string) : EndsWithConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="StringEnding(string) : EndsWithConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(string) : RegexConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="StringMatching(string) : RegexConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="SamePath(string) : SamePathConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="SubPath(string) : SubPathConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="SamePathOrUnder(string) : SamePathOrUnderConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="InRange(IComparable, IComparable) : RangeConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="ConstraintFactory">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="88" />
                    <Metric Name="CyclomaticComplexity" Value="61" />
                    <Metric Name="ClassCoupling" Value="39" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="66" />
                  </Metrics>
                  <Members>
                    <Member Name="Not.get() : ConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="No.get() : ConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="All.get() : ConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Some.get() : ConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="None.get() : ConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Property(string) : ResolvableConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Length.get() : ResolvableConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Count.get() : ResolvableConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Message.get() : ResolvableConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="InnerException.get() : ResolvableConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Attribute(Type) : ResolvableConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Attribute&lt;T&gt;() : ResolvableConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Null.get() : NullConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="True.get() : TrueConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="False.get() : FalseConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="NaN.get() : NaNConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Empty.get() : EmptyConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Unique.get() : UniqueItemsConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="BinarySerializable.get() : BinarySerializableConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="XmlSerializable.get() : XmlSerializableConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="EqualTo(object) : EqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="SameAs(object) : SameAsConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="GreaterThan(object) : GreaterThanConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="GreaterThanOrEqualTo(object) : GreaterThanOrEqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AtLeast(object) : GreaterThanOrEqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="LessThan(object) : LessThanConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="LessThanOrEqualTo(object) : LessThanOrEqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AtMost(object) : LessThanOrEqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="TypeOf(Type) : ExactTypeConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="TypeOf&lt;T&gt;() : ExactTypeConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="InstanceOf(Type) : InstanceOfTypeConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="InstanceOf&lt;T&gt;() : InstanceOfTypeConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="InstanceOfType(Type) : InstanceOfTypeConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="InstanceOfType&lt;T&gt;() : InstanceOfTypeConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AssignableFrom(Type) : AssignableFromConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AssignableFrom&lt;T&gt;() : AssignableFromConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AssignableTo(Type) : AssignableToConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AssignableTo&lt;T&gt;() : AssignableToConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="EquivalentTo(IEnumerable) : CollectionEquivalentConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="SubsetOf(IEnumerable) : CollectionSubsetConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Ordered.get() : CollectionOrderedConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Member(object) : CollectionContainsConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Contains(object) : CollectionContainsConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Contains(string) : ContainsConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="StringContaining(string) : SubstringConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ContainsSubstring(string) : SubstringConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="DoesNotContain(string) : SubstringConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="StartsWith(string) : StartsWithConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="StringStarting(string) : StartsWithConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="DoesNotStartWith(string) : StartsWithConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="EndsWith(string) : EndsWithConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="StringEnding(string) : EndsWithConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="DoesNotEndWith(string) : EndsWithConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(string) : RegexConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="StringMatching(string) : RegexConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="DoesNotMatch(string) : RegexConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="SamePath(string) : SamePathConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="SubPath(string) : SubPathConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="SamePathOrUnder(string) : SamePathOrUnderConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="InRange(IComparable, IComparable) : RangeConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ConstraintFactory()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="ConstraintOperator">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="92" />
                    <Metric Name="CyclomaticComplexity" Value="8" />
                    <Metric Name="ClassCoupling" Value="1" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="7" />
                  </Metrics>
                  <Members>
                    <Member Name="LeftContext.get() : object">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="LeftContext.set(object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="RightContext.get() : object">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="RightContext.set(object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="LeftPrecedence.get() : int">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="RightPrecedence.get() : int">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Reduce(ConstraintBuilder.ConstraintStack) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="ConstraintOperator()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="PrefixOperator">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="94" />
                    <Metric Name="CyclomaticComplexity" Value="3" />
                    <Metric Name="ClassCoupling" Value="3" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="2" />
                  </Metrics>
                  <Members>
                    <Member Name="Reduce(ConstraintBuilder.ConstraintStack) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ApplyPrefix(Constraint) : Constraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="PrefixOperator()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="NotOperator">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="90" />
                    <Metric Name="CyclomaticComplexity" Value="2" />
                    <Metric Name="ClassCoupling" Value="4" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="3" />
                  </Metrics>
                  <Members>
                    <Member Name="NotOperator()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="ApplyPrefix(Constraint) : Constraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="CollectionOperator">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="84" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="2" />
                  </Metrics>
                  <Members>
                    <Member Name="CollectionOperator()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="AllOperator">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="93" />
                    <Metric Name="CyclomaticComplexity" Value="2" />
                    <Metric Name="ClassCoupling" Value="3" />
                    <Metric Name="DepthOfInheritance" Value="4" />
                    <Metric Name="LinesOfCode" Value="2" />
                  </Metrics>
                  <Members>
                    <Member Name="ApplyPrefix(Constraint) : Constraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="AllOperator()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="SomeOperator">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="93" />
                    <Metric Name="CyclomaticComplexity" Value="2" />
                    <Metric Name="ClassCoupling" Value="3" />
                    <Metric Name="DepthOfInheritance" Value="4" />
                    <Metric Name="LinesOfCode" Value="2" />
                  </Metrics>
                  <Members>
                    <Member Name="ApplyPrefix(Constraint) : Constraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="SomeOperator()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="NoneOperator">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="93" />
                    <Metric Name="CyclomaticComplexity" Value="2" />
                    <Metric Name="ClassCoupling" Value="3" />
                    <Metric Name="DepthOfInheritance" Value="4" />
                    <Metric Name="LinesOfCode" Value="2" />
                  </Metrics>
                  <Members>
                    <Member Name="ApplyPrefix(Constraint) : Constraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="NoneOperator()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="WithOperator">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="91" />
                    <Metric Name="CyclomaticComplexity" Value="2" />
                    <Metric Name="ClassCoupling" Value="3" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="3" />
                  </Metrics>
                  <Members>
                    <Member Name="WithOperator()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="ApplyPrefix(Constraint) : Constraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="SelfResolvingOperator">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="100" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="1" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="1" />
                  </Metrics>
                  <Members>
                    <Member Name="SelfResolvingOperator()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="PropOperator">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="77" />
                    <Metric Name="CyclomaticComplexity" Value="5" />
                    <Metric Name="ClassCoupling" Value="6" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="10" />
                  </Metrics>
                  <Members>
                    <Member Name="Name.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="PropOperator(string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="79" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="Reduce(ConstraintBuilder.ConstraintStack) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="69" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="5" />
                        <Metric Name="LinesOfCode" Value="6" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="AttributeOperator">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="73" />
                    <Metric Name="CyclomaticComplexity" Value="4" />
                    <Metric Name="ClassCoupling" Value="7" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="9" />
                  </Metrics>
                  <Members>
                    <Member Name="AttributeOperator(Type)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="79" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="Reduce(ConstraintBuilder.ConstraintStack) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="69" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="6" />
                        <Metric Name="LinesOfCode" Value="6" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="ThrowsOperator">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="77" />
                    <Metric Name="CyclomaticComplexity" Value="4" />
                    <Metric Name="ClassCoupling" Value="5" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="7" />
                  </Metrics>
                  <Members>
                    <Member Name="ThrowsOperator()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Reduce(ConstraintBuilder.ConstraintStack) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="71" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="5" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="BinaryOperator">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="82" />
                    <Metric Name="CyclomaticComplexity" Value="7" />
                    <Metric Name="ClassCoupling" Value="4" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="10" />
                  </Metrics>
                  <Members>
                    <Member Name="Reduce(ConstraintBuilder.ConstraintStack) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="78" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="LeftPrecedence.get() : int">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="78" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="RightPrecedence.get() : int">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="78" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="ApplyOperator(Constraint, Constraint) : Constraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="BinaryOperator()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="AndOperator">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="89" />
                    <Metric Name="CyclomaticComplexity" Value="2" />
                    <Metric Name="ClassCoupling" Value="4" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="3" />
                  </Metrics>
                  <Members>
                    <Member Name="AndOperator()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="ApplyOperator(Constraint, Constraint) : Constraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="OrOperator">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="89" />
                    <Metric Name="CyclomaticComplexity" Value="2" />
                    <Metric Name="ClassCoupling" Value="4" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="3" />
                  </Metrics>
                  <Members>
                    <Member Name="OrOperator()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="ApplyOperator(Constraint, Constraint) : Constraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="ContainsConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="80" />
                    <Metric Name="CyclomaticComplexity" Value="15" />
                    <Metric Name="ClassCoupling" Value="13" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="31" />
                  </Metrics>
                  <Members>
                    <Member Name="RealConstraint.get() : Constraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="58" />
                        <Metric Name="CyclomaticComplexity" Value="5" />
                        <Metric Name="ClassCoupling" Value="7" />
                        <Metric Name="LinesOfCode" Value="13" />
                      </Metrics>
                    </Member>
                    <Member Name="RealConstraint.set(Constraint) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ContainsConstraint(object)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="IgnoreCase.get() : ContainsConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Using(IComparer) : ContainsConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Using&lt;T&gt;(IComparer&lt;T&gt;) : ContainsConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Using&lt;T&gt;(Comparison&lt;T&gt;) : ContainsConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Using(IEqualityComparer) : ContainsConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Using&lt;T&gt;(IEqualityComparer&lt;T&gt;) : ContainsConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="DelayedConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="70" />
                    <Metric Name="CyclomaticComplexity" Value="17" />
                    <Metric Name="ClassCoupling" Value="7" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="40" />
                  </Metrics>
                  <Members>
                    <Member Name="DelayedConstraint(Constraint, int)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="DelayedConstraint(Constraint, int, int)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="74" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="78" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(ActualValueDelegate) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="58" />
                        <Metric Name="CyclomaticComplexity" Value="5" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="13" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches&lt;T&gt;(ref T) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="58" />
                        <Metric Name="CyclomaticComplexity" Value="5" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="14" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteActualValueTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="GetStringRepresentation() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="EmptyDirectoryContraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="73" />
                    <Metric Name="CyclomaticComplexity" Value="7" />
                    <Metric Name="ClassCoupling" Value="6" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="18" />
                  </Metrics>
                  <Members>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="63" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="9" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteActualValueTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="69" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="6" />
                      </Metrics>
                    </Member>
                    <Member Name="EmptyDirectoryContraint()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="EmptyConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="81" />
                    <Metric Name="CyclomaticComplexity" Value="6" />
                    <Metric Name="ClassCoupling" Value="6" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="10" />
                  </Metrics>
                  <Members>
                    <Member Name="RealConstraint.get() : Constraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="68" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="5" />
                        <Metric Name="LinesOfCode" Value="6" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="EmptyConstraint()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="EqualConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="68" />
                    <Metric Name="CyclomaticComplexity" Value="65" />
                    <Metric Name="ClassCoupling" Value="21" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="171" />
                  </Metrics>
                  <Members>
                    <Member Name="EqualConstraint(object)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="78" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="IgnoreCase.get() : EqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="NoClip.get() : EqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="AsCollection.get() : EqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Within(object) : EqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="73" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                    <Member Name="Ulps.get() : EqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Percent.get() : EqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Days.get() : EqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Hours.get() : EqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Minutes.get() : EqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Seconds.get() : EqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Milliseconds.get() : EqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Ticks.get() : EqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Comparer(IComparer) : EqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Using(IComparer) : EqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Using&lt;T&gt;(IComparer&lt;T&gt;) : EqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Using&lt;T&gt;(Comparison&lt;T&gt;) : EqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Using(IEqualityComparer) : EqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Using&lt;T&gt;(IEqualityComparer&lt;T&gt;) : EqualConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="78" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteMessageTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="86" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="64" />
                        <Metric Name="CyclomaticComplexity" Value="4" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="8" />
                      </Metrics>
                    </Member>
                    <Member Name="DisplayDifferences(MessageWriter, object, object, int) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="54" />
                        <Metric Name="CyclomaticComplexity" Value="8" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="18" />
                      </Metrics>
                    </Member>
                    <Member Name="DisplayStringDifferences(MessageWriter, string, string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="57" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="14" />
                      </Metrics>
                    </Member>
                    <Member Name="DisplayStreamDifferences(MessageWriter, Stream, Stream, int) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="61" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="11" />
                      </Metrics>
                    </Member>
                    <Member Name="DisplayCollectionDifferences(MessageWriter, ICollection, ICollection, int) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="54" />
                        <Metric Name="CyclomaticComplexity" Value="6" />
                        <Metric Name="ClassCoupling" Value="5" />
                        <Metric Name="LinesOfCode" Value="18" />
                      </Metrics>
                    </Member>
                    <Member Name="DisplayCollectionTypesAndSizes(MessageWriter, ICollection, ICollection, int) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="56" />
                        <Metric Name="CyclomaticComplexity" Value="4" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="15" />
                      </Metrics>
                    </Member>
                    <Member Name="DisplayFailurePoint(MessageWriter, ICollection, ICollection, int, int) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="50" />
                        <Metric Name="CyclomaticComplexity" Value="9" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="22" />
                      </Metrics>
                    </Member>
                    <Member Name="GetValueFromCollection(ICollection, int) : object">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="54" />
                        <Metric Name="CyclomaticComplexity" Value="7" />
                        <Metric Name="ClassCoupling" Value="7" />
                        <Metric Name="LinesOfCode" Value="17" />
                      </Metrics>
                    </Member>
                    <Member Name="EqualConstraint()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="76" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="EqualityAdapter">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="90" />
                    <Metric Name="CyclomaticComplexity" Value="7" />
                    <Metric Name="ClassCoupling" Value="9" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="6" />
                  </Metrics>
                  <Members>
                    <Member Name="ObjectsEqual(object, object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="For(IComparer) : EqualityAdapter">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="For(IEqualityComparer) : EqualityAdapter">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="For&lt;T&gt;(IEqualityComparer&lt;T&gt;) : EqualityAdapter">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="For&lt;T&gt;(IComparer&lt;T&gt;) : EqualityAdapter">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="89" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="For&lt;T&gt;(Comparison&lt;T&gt;) : EqualityAdapter">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="89" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="EqualityAdapter()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="EqualityAdapter.EqualityComparerAdapter">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="91" />
                    <Metric Name="CyclomaticComplexity" Value="2" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="3" />
                  </Metrics>
                  <Members>
                    <Member Name="EqualityComparerAdapter(IEqualityComparer)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ObjectsEqual(object, object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="EqualityAdapter.EqualityComparerAdapter&lt;T&gt;">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="72" />
                    <Metric Name="CyclomaticComplexity" Value="4" />
                    <Metric Name="ClassCoupling" Value="4" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="9" />
                  </Metrics>
                  <Members>
                    <Member Name="EqualityComparerAdapter(IEqualityComparer&lt;T&gt;)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ObjectsEqual(object, object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="64" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="8" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="EqualityAdapter.ComparisonAdapterAdapter">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="90" />
                    <Metric Name="CyclomaticComplexity" Value="2" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="3" />
                  </Metrics>
                  <Members>
                    <Member Name="ComparisonAdapterAdapter(ComparisonAdapter)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ObjectsEqual(object, object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="FloatingPointNumerics">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="69" />
                    <Metric Name="CyclomaticComplexity" Value="7" />
                    <Metric Name="ClassCoupling" Value="3" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="35" />
                  </Metrics>
                  <Members>
                    <Member Name="AreAlmostEqualUlps(float, float, int) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="58" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="13" />
                      </Metrics>
                    </Member>
                    <Member Name="AreAlmostEqualUlps(double, double, long) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="58" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="13" />
                      </Metrics>
                    </Member>
                    <Member Name="ReinterpretAsInt(float) : int">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="ReinterpretAsLong(double) : long">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="ReinterpretAsFloat(int) : float">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="ReinterpretAsDouble(long) : double">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="FloatingPointNumerics()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="FloatingPointNumerics.FloatIntUnion">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="100" />
                    <Metric Name="CyclomaticComplexity" Value="0" />
                    <Metric Name="ClassCoupling" Value="0" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="0" />
                  </Metrics>
                  <Members />
                </Type>
                <Type Name="FloatingPointNumerics.DoubleLongUnion">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="100" />
                    <Metric Name="CyclomaticComplexity" Value="0" />
                    <Metric Name="ClassCoupling" Value="0" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="0" />
                  </Metrics>
                  <Members />
                </Type>
                <Type Name="MessageWriter">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="99" />
                    <Metric Name="CyclomaticComplexity" Value="16" />
                    <Metric Name="ClassCoupling" Value="5" />
                    <Metric Name="DepthOfInheritance" Value="4" />
                    <Metric Name="LinesOfCode" Value="2" />
                  </Metrics>
                  <Members>
                    <Member Name="MessageWriter()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="MaxLineLength.get() : int">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="MaxLineLength.set(int) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteMessageLine(string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteMessageLine(int, string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="DisplayDifferences(Constraint) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="DisplayDifferences(object, object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="DisplayDifferences(object, object, Tolerance) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="DisplayStringDifferences(string, string, int, bool, bool) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteConnector(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="WritePredicate(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteExpectedValue(object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteModifier(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteActualValue(object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteValue(object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteCollectionElements(ICollection, int, int) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="MsgUtils">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="58" />
                    <Metric Name="CyclomaticComplexity" Value="43" />
                    <Metric Name="ClassCoupling" Value="5" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="103" />
                  </Metrics>
                  <Members>
                    <Member Name="GetTypeRepresentation(object) : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="51" />
                        <Metric Name="CyclomaticComplexity" Value="6" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="21" />
                      </Metrics>
                    </Member>
                    <Member Name="EscapeControlChars(string) : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="50" />
                        <Metric Name="CyclomaticComplexity" Value="16" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="22" />
                      </Metrics>
                    </Member>
                    <Member Name="GetArrayIndicesAsString(int[]) : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="61" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="10" />
                      </Metrics>
                    </Member>
                    <Member Name="GetArrayIndicesFromCollectionIndex(ICollection, int) : int[]">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="61" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="10" />
                      </Metrics>
                    </Member>
                    <Member Name="ClipString(string, int, int) : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="56" />
                        <Metric Name="CyclomaticComplexity" Value="4" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="15" />
                      </Metrics>
                    </Member>
                    <Member Name="ClipExpectedAndActual(ref string, ref string, int, int) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="60" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="11" />
                      </Metrics>
                    </Member>
                    <Member Name="FindMismatchPosition(string, string, int, bool) : int">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="58" />
                        <Metric Name="CyclomaticComplexity" Value="6" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="12" />
                      </Metrics>
                    </Member>
                    <Member Name="MsgUtils()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="MsgUtils()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="Numerics">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="52" />
                    <Metric Name="CyclomaticComplexity" Value="103" />
                    <Metric Name="ClassCoupling" Value="9" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="228" />
                  </Metrics>
                  <Members>
                    <Member Name="IsNumericType(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="IsFloatingPointNumeric(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="67" />
                        <Metric Name="CyclomaticComplexity" Value="4" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="7" />
                      </Metrics>
                    </Member>
                    <Member Name="IsFixedPointNumeric(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="50" />
                        <Metric Name="CyclomaticComplexity" Value="11" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="24" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(object, object, ref Tolerance) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="45" />
                        <Metric Name="CyclomaticComplexity" Value="14" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="32" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(double, double, ref Tolerance) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="48" />
                        <Metric Name="CyclomaticComplexity" Value="13" />
                        <Metric Name="ClassCoupling" Value="7" />
                        <Metric Name="LinesOfCode" Value="25" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(float, float, ref Tolerance) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="48" />
                        <Metric Name="CyclomaticComplexity" Value="13" />
                        <Metric Name="ClassCoupling" Value="7" />
                        <Metric Name="LinesOfCode" Value="25" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(decimal, decimal, Tolerance) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="54" />
                        <Metric Name="CyclomaticComplexity" Value="6" />
                        <Metric Name="ClassCoupling" Value="6" />
                        <Metric Name="LinesOfCode" Value="16" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(ulong, ulong, Tolerance) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="52" />
                        <Metric Name="CyclomaticComplexity" Value="7" />
                        <Metric Name="ClassCoupling" Value="5" />
                        <Metric Name="LinesOfCode" Value="19" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(long, long, Tolerance) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="55" />
                        <Metric Name="CyclomaticComplexity" Value="6" />
                        <Metric Name="ClassCoupling" Value="5" />
                        <Metric Name="LinesOfCode" Value="16" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(uint, uint, Tolerance) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="52" />
                        <Metric Name="CyclomaticComplexity" Value="7" />
                        <Metric Name="ClassCoupling" Value="5" />
                        <Metric Name="LinesOfCode" Value="19" />
                      </Metrics>
                    </Member>
                    <Member Name="AreEqual(int, int, Tolerance) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="55" />
                        <Metric Name="CyclomaticComplexity" Value="6" />
                        <Metric Name="ClassCoupling" Value="5" />
                        <Metric Name="LinesOfCode" Value="15" />
                      </Metrics>
                    </Member>
                    <Member Name="Compare(object, object) : int">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="46" />
                        <Metric Name="CyclomaticComplexity" Value="13" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="27" />
                      </Metrics>
                    </Member>
                    <Member Name="Numerics()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="NUnitComparer">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="61" />
                    <Metric Name="CyclomaticComplexity" Value="12" />
                    <Metric Name="ClassCoupling" Value="7" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="32" />
                  </Metrics>
                  <Members>
                    <Member Name="Default.get() : NUnitComparer">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Compare(object, object) : int">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="46" />
                        <Metric Name="CyclomaticComplexity" Value="10" />
                        <Metric Name="ClassCoupling" Value="6" />
                        <Metric Name="LinesOfCode" Value="30" />
                      </Metrics>
                    </Member>
                    <Member Name="NUnitComparer()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="NUnitEqualityComparer">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="62" />
                    <Metric Name="CyclomaticComplexity" Value="83" />
                    <Metric Name="ClassCoupling" Value="22" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="169" />
                  </Metrics>
                  <Members>
                    <Member Name="Default.get() : NUnitEqualityComparer">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IgnoreCase.get() : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IgnoreCase.set(bool) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="CompareAsCollection.get() : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="CompareAsCollection.set(bool) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ExternalComparer.get() : EqualityAdapter">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ExternalComparer.set(EqualityAdapter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Tolerance.get() : Tolerance">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Tolerance.set(Tolerance) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="FailurePoints.get() : IList">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ObjectsEqual(object, object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="34" />
                        <Metric Name="CyclomaticComplexity" Value="32" />
                        <Metric Name="ClassCoupling" Value="13" />
                        <Metric Name="LinesOfCode" Value="64" />
                      </Metrics>
                    </Member>
                    <Member Name="ArraysEqual(Array, Array) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="62" />
                        <Metric Name="CyclomaticComplexity" Value="4" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="9" />
                      </Metrics>
                    </Member>
                    <Member Name="DictionariesEqual(IDictionary, IDictionary) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="54" />
                        <Metric Name="CyclomaticComplexity" Value="7" />
                        <Metric Name="ClassCoupling" Value="6" />
                        <Metric Name="LinesOfCode" Value="16" />
                      </Metrics>
                    </Member>
                    <Member Name="CollectionsEqual(ICollection, ICollection) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="58" />
                        <Metric Name="CyclomaticComplexity" Value="6" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="12" />
                      </Metrics>
                    </Member>
                    <Member Name="StringsEqual(string, string) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="71" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="5" />
                      </Metrics>
                    </Member>
                    <Member Name="EnumerablesEqual(IEnumerable, IEnumerable) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="60" />
                        <Metric Name="CyclomaticComplexity" Value="5" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="11" />
                      </Metrics>
                    </Member>
                    <Member Name="DirectoriesEqual(DirectoryInfo, DirectoryInfo) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="65" />
                        <Metric Name="CyclomaticComplexity" Value="4" />
                        <Metric Name="ClassCoupling" Value="5" />
                        <Metric Name="LinesOfCode" Value="7" />
                      </Metrics>
                    </Member>
                    <Member Name="StreamsEqual(Stream, Stream) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="45" />
                        <Metric Name="CyclomaticComplexity" Value="10" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="33" />
                      </Metrics>
                    </Member>
                    <Member Name="NUnitEqualityComparer()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="NUnitEqualityComparer()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="PathConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="66" />
                    <Metric Name="CyclomaticComplexity" Value="31" />
                    <Metric Name="ClassCoupling" Value="4" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="76" />
                  </Metrics>
                  <Members>
                    <Member Name="PathConstraint(string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="IgnoreCase.get() : PathConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="RespectCase.get() : PathConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="69" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="6" />
                      </Metrics>
                    </Member>
                    <Member Name="IsMatch(string, string) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="GetStringRepresentation() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="78" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="Canonicalize(string) : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="45" />
                        <Metric Name="CyclomaticComplexity" Value="11" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="31" />
                      </Metrics>
                    </Member>
                    <Member Name="IsSamePath(string, string, bool) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="IsSubPath(string, string, bool) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="60" />
                        <Metric Name="CyclomaticComplexity" Value="5" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="11" />
                      </Metrics>
                    </Member>
                    <Member Name="IsSamePathOrUnder(string, string) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="57" />
                        <Metric Name="CyclomaticComplexity" Value="5" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="14" />
                      </Metrics>
                    </Member>
                    <Member Name="PathConstraint()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="79" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="SamePathConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="90" />
                    <Metric Name="CyclomaticComplexity" Value="3" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="5" />
                  </Metrics>
                  <Members>
                    <Member Name="SamePathConstraint(string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="98" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsMatch(string, string) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="SubPathConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="82" />
                    <Metric Name="CyclomaticComplexity" Value="4" />
                    <Metric Name="ClassCoupling" Value="3" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="8" />
                  </Metrics>
                  <Members>
                    <Member Name="SubPathConstraint(string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="98" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsMatch(string, string) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="71" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="5" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="SamePathOrUnderConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="81" />
                    <Metric Name="CyclomaticComplexity" Value="4" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="8" />
                  </Metrics>
                  <Members>
                    <Member Name="SamePathOrUnderConstraint(string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="98" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IsMatch(string, string) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="71" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="5" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="PredicateConstraint&lt;T&gt;">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="76" />
                    <Metric Name="CyclomaticComplexity" Value="5" />
                    <Metric Name="ClassCoupling" Value="8" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="10" />
                  </Metrics>
                  <Members>
                    <Member Name="PredicateConstraint(Predicate&lt;T&gt;)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="70" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="5" />
                        <Metric Name="LinesOfCode" Value="5" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="74" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="5" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="NotConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="90" />
                    <Metric Name="CyclomaticComplexity" Value="4" />
                    <Metric Name="ClassCoupling" Value="3" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="7" />
                  </Metrics>
                  <Members>
                    <Member Name="NotConstraint(Constraint)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="98" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="78" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteActualValueTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="AllItemsConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="72" />
                    <Metric Name="CyclomaticComplexity" Value="7" />
                    <Metric Name="ClassCoupling" Value="7" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="14" />
                  </Metrics>
                  <Members>
                    <Member Name="AllItemsConstraint(Constraint)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="60" />
                        <Metric Name="CyclomaticComplexity" Value="5" />
                        <Metric Name="ClassCoupling" Value="6" />
                        <Metric Name="LinesOfCode" Value="11" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="SomeItemsConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="72" />
                    <Metric Name="CyclomaticComplexity" Value="7" />
                    <Metric Name="ClassCoupling" Value="7" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="14" />
                  </Metrics>
                  <Members>
                    <Member Name="SomeItemsConstraint(Constraint)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="59" />
                        <Metric Name="CyclomaticComplexity" Value="5" />
                        <Metric Name="ClassCoupling" Value="6" />
                        <Metric Name="LinesOfCode" Value="11" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="NoItemConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="72" />
                    <Metric Name="CyclomaticComplexity" Value="7" />
                    <Metric Name="ClassCoupling" Value="7" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="14" />
                  </Metrics>
                  <Members>
                    <Member Name="NoItemConstraint(Constraint)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="59" />
                        <Metric Name="CyclomaticComplexity" Value="5" />
                        <Metric Name="ClassCoupling" Value="6" />
                        <Metric Name="LinesOfCode" Value="11" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="PropertyExistsConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="81" />
                    <Metric Name="CyclomaticComplexity" Value="7" />
                    <Metric Name="ClassCoupling" Value="6" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="14" />
                  </Metrics>
                  <Members>
                    <Member Name="PropertyExistsConstraint(string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="63" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="9" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteActualValueTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="GetStringRepresentation() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="PropertyConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="72" />
                    <Metric Name="CyclomaticComplexity" Value="10" />
                    <Metric Name="ClassCoupling" Value="8" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="23" />
                  </Metrics>
                  <Members>
                    <Member Name="PropertyConstraint(string, Constraint)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="58" />
                        <Metric Name="CyclomaticComplexity" Value="4" />
                        <Metric Name="ClassCoupling" Value="6" />
                        <Metric Name="LinesOfCode" Value="13" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="69" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="6" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteActualValueTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="GetStringRepresentation() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="RangeConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="76" />
                    <Metric Name="CyclomaticComplexity" Value="10" />
                    <Metric Name="ClassCoupling" Value="9" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="20" />
                  </Metrics>
                  <Members>
                    <Member Name="RangeConstraint(IComparable, IComparable)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="78" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="64" />
                        <Metric Name="CyclomaticComplexity" Value="5" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="9" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="86" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Using(IComparer) : RangeConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Using&lt;T&gt;(IComparer&lt;T&gt;) : RangeConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Using&lt;T&gt;(Comparison&lt;T&gt;) : RangeConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="ResolvableConstraintExpression">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="91" />
                    <Metric Name="CyclomaticComplexity" Value="5" />
                    <Metric Name="ClassCoupling" Value="7" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="5" />
                  </Metrics>
                  <Members>
                    <Member Name="ResolvableConstraintExpression()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ResolvableConstraintExpression(ConstraintBuilder)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="98" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="And.get() : ConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Or.get() : ConstraintExpression">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IResolveConstraint.Resolve() : Constraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="ReusableConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="90" />
                    <Metric Name="CyclomaticComplexity" Value="4" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="4" />
                  </Metrics>
                  <Members>
                    <Member Name="ReusableConstraint(IResolveConstraint)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="implicit operator ReusableConstraint(Constraint)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ToString() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="91" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Resolve() : Constraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="SameAsConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="90" />
                    <Metric Name="CyclomaticComplexity" Value="3" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="5" />
                  </Metrics>
                  <Members>
                    <Member Name="SameAsConstraint(object)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="BinarySerializableConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="81" />
                    <Metric Name="CyclomaticComplexity" Value="7" />
                    <Metric Name="ClassCoupling" Value="8" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="14" />
                  </Metrics>
                  <Members>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="63" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="9" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteActualValueTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="GetStringRepresentation() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="BinarySerializableConstraint()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="XmlSerializableConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="77" />
                    <Metric Name="CyclomaticComplexity" Value="8" />
                    <Metric Name="ClassCoupling" Value="8" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="16" />
                  </Metrics>
                  <Members>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="60" />
                        <Metric Name="CyclomaticComplexity" Value="4" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="11" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteActualValueTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="GetStringRepresentation() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="XmlSerializableConstraint()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="StringConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="91" />
                    <Metric Name="CyclomaticComplexity" Value="2" />
                    <Metric Name="ClassCoupling" Value="1" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="3" />
                  </Metrics>
                  <Members>
                    <Member Name="StringConstraint(string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="IgnoreCase.get() : StringConstraint">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="EmptyStringConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="83" />
                    <Metric Name="CyclomaticComplexity" Value="4" />
                    <Metric Name="ClassCoupling" Value="3" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="6" />
                  </Metrics>
                  <Members>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="73" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="EmptyStringConstraint()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="NullOrEmptyStringConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="77" />
                    <Metric Name="CyclomaticComplexity" Value="5" />
                    <Metric Name="ClassCoupling" Value="4" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="9" />
                  </Metrics>
                  <Members>
                    <Member Name="NullOrEmptyStringConstraint()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="66" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="7" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="SubstringConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="73" />
                    <Metric Name="CyclomaticComplexity" Value="6" />
                    <Metric Name="ClassCoupling" Value="3" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="14" />
                  </Metrics>
                  <Members>
                    <Member Name="SubstringConstraint(string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="98" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="63" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="9" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="75" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="StartsWithConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="73" />
                    <Metric Name="CyclomaticComplexity" Value="6" />
                    <Metric Name="ClassCoupling" Value="4" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="14" />
                  </Metrics>
                  <Members>
                    <Member Name="StartsWithConstraint(string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="98" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="65" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="8" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="71" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="5" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="EndsWithConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="73" />
                    <Metric Name="CyclomaticComplexity" Value="6" />
                    <Metric Name="ClassCoupling" Value="3" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="13" />
                  </Metrics>
                  <Members>
                    <Member Name="EndsWithConstraint(string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="98" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="65" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="8" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="75" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="RegexConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="77" />
                    <Metric Name="CyclomaticComplexity" Value="6" />
                    <Metric Name="ClassCoupling" Value="4" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="10" />
                  </Metrics>
                  <Members>
                    <Member Name="RegexConstraint(string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="98" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="72" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="5" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="75" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="ThrowsConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="72" />
                    <Metric Name="CyclomaticComplexity" Value="16" />
                    <Metric Name="ClassCoupling" Value="9" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="31" />
                  </Metrics>
                  <Members>
                    <Member Name="ThrowsConstraint(Constraint)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="98" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ActualException.get() : Exception">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="60" />
                        <Metric Name="CyclomaticComplexity" Value="5" />
                        <Metric Name="ClassCoupling" Value="6" />
                        <Metric Name="LinesOfCode" Value="11" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(ActualValueDelegate) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="73" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="76" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteActualValueTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="70" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="5" />
                        <Metric Name="LinesOfCode" Value="6" />
                      </Metrics>
                    </Member>
                    <Member Name="GetStringRepresentation() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="75" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="ThrowsNothingConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="80" />
                    <Metric Name="CyclomaticComplexity" Value="8" />
                    <Metric Name="ClassCoupling" Value="7" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="14" />
                  </Metrics>
                  <Members>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="66" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="7" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(ActualValueDelegate) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="73" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteActualValueTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ThrowsNothingConstraint()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="ToleranceMode">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="100" />
                    <Metric Name="CyclomaticComplexity" Value="0" />
                    <Metric Name="ClassCoupling" Value="0" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="0" />
                  </Metrics>
                  <Members />
                </Type>
                <Type Name="Tolerance">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="88" />
                    <Metric Name="CyclomaticComplexity" Value="19" />
                    <Metric Name="ClassCoupling" Value="5" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="31" />
                  </Metrics>
                  <Members>
                    <Member Name="Empty.get() : Tolerance">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Tolerance(object)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Tolerance(object, ToleranceMode)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Mode.get() : ToleranceMode">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="CheckLinearAndNumeric() : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="71" />
                        <Metric Name="CyclomaticComplexity" Value="4" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="5" />
                      </Metrics>
                    </Member>
                    <Member Name="Value.get() : object">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Percent.get() : Tolerance">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Ulps.get() : Tolerance">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Days.get() : Tolerance">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Hours.get() : Tolerance">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Minutes.get() : Tolerance">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Seconds.get() : Tolerance">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Milliseconds.get() : Tolerance">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Ticks.get() : Tolerance">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="IsEmpty.get() : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Tolerance()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="90" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="TypeConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="91" />
                    <Metric Name="CyclomaticComplexity" Value="3" />
                    <Metric Name="ClassCoupling" Value="3" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="3" />
                  </Metrics>
                  <Members>
                    <Member Name="TypeConstraint(Type)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteActualValueTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="ExactTypeConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="90" />
                    <Metric Name="CyclomaticComplexity" Value="4" />
                    <Metric Name="ClassCoupling" Value="4" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="5" />
                  </Metrics>
                  <Members>
                    <Member Name="ExactTypeConstraint(Type)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="78" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="InstanceOfTypeConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="83" />
                    <Metric Name="CyclomaticComplexity" Value="4" />
                    <Metric Name="ClassCoupling" Value="4" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="6" />
                  </Metrics>
                  <Members>
                    <Member Name="InstanceOfTypeConstraint(Type)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="78" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="AssignableFromConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="83" />
                    <Metric Name="CyclomaticComplexity" Value="4" />
                    <Metric Name="ClassCoupling" Value="4" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="6" />
                  </Metrics>
                  <Members>
                    <Member Name="AssignableFromConstraint(Type)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="98" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="77" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="AssignableToConstraint">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="83" />
                    <Metric Name="CyclomaticComplexity" Value="4" />
                    <Metric Name="ClassCoupling" Value="4" />
                    <Metric Name="DepthOfInheritance" Value="3" />
                    <Metric Name="LinesOfCode" Value="6" />
                  </Metrics>
                  <Members>
                    <Member Name="AssignableToConstraint(Type)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="98" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Matches(object) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="77" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="WriteDescriptionTo(MessageWriter) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="85" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
              </Types>
            </Namespace>
          </Namespaces>
        </Module>
      </Modules>
    </Target>
    <Target Name="C:\Program Files (x86)\Microsoft Visual Studio 10.0\Team Tools\Static Analysis Tools\FxCop\lib\nunit.mocks.dll">
      <Modules>
        <Module Name="nunit.mocks.dll" AssemblyVersion="2.5.10.11092">
          <Metrics>
            <Metric Name="MaintainabilityIndex" Value="83" />
            <Metric Name="CyclomaticComplexity" Value="84" />
            <Metric Name="ClassCoupling" Value="30" />
            <Metric Name="DepthOfInheritance" Value="2" />
            <Metric Name="LinesOfCode" Value="161" />
          </Metrics>
          <Namespaces>
            <Namespace Name="NUnit.Mocks">
              <Metrics>
                <Metric Name="MaintainabilityIndex" Value="83" />
                <Metric Name="CyclomaticComplexity" Value="84" />
                <Metric Name="ClassCoupling" Value="30" />
                <Metric Name="DepthOfInheritance" Value="2" />
                <Metric Name="LinesOfCode" Value="161" />
              </Metrics>
              <Types>
                <Type Name="IVerify">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="100" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="0" />
                    <Metric Name="DepthOfInheritance" Value="0" />
                    <Metric Name="LinesOfCode" Value="0" />
                  </Metrics>
                  <Members>
                    <Member Name="Verify() : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="ICallHandler">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="100" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="0" />
                    <Metric Name="DepthOfInheritance" Value="0" />
                    <Metric Name="LinesOfCode" Value="0" />
                  </Metrics>
                  <Members>
                    <Member Name="Call(string, params object[]) : object">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="IMock">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="100" />
                    <Metric Name="CyclomaticComplexity" Value="9" />
                    <Metric Name="ClassCoupling" Value="3" />
                    <Metric Name="DepthOfInheritance" Value="0" />
                    <Metric Name="LinesOfCode" Value="0" />
                  </Metrics>
                  <Members>
                    <Member Name="Name.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="Strict.get() : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="Strict.set(bool) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="Expect(string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="Expect(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="ExpectNoCall(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="ExpectAndReturn(string, object, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="ExpectAndThrow(string, Exception, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="SetReturnValue(string, object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="Mock">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="80" />
                    <Metric Name="CyclomaticComplexity" Value="22" />
                    <Metric Name="ClassCoupling" Value="18" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="42" />
                  </Metrics>
                  <Members>
                    <Member Name="LastException.get() : Exception">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Mock()">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="98" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Mock(string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Name.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Strict.get() : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Strict.set(bool) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="95" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Expect(string, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Expect(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ExpectNoCall(string) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="82" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="ExpectAndReturn(string, object, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="ExpectAndThrow(string, Exception, params object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="SetReturnValue(string, object) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="Verify() : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="61" />
                        <Metric Name="CyclomaticComplexity" Value="4" />
                        <Metric Name="ClassCoupling" Value="8" />
                        <Metric Name="LinesOfCode" Value="10" />
                      </Metrics>
                    </Member>
                    <Member Name="Call(string, params object[]) : object">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="62" />
                        <Metric Name="CyclomaticComplexity" Value="4" />
                        <Metric Name="ClassCoupling" Value="6" />
                        <Metric Name="LinesOfCode" Value="9" />
                      </Metrics>
                    </Member>
                    <Member Name="AddExpectedCall(string, object, Exception, object[]) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="64" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="7" />
                        <Metric Name="LinesOfCode" Value="8" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="DynamicMock">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="81" />
                    <Metric Name="CyclomaticComplexity" Value="4" />
                    <Metric Name="ClassCoupling" Value="5" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="8" />
                  </Metrics>
                  <Members>
                    <Member Name="MockInstance.get() : object">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="71" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="5" />
                      </Metrics>
                    </Member>
                    <Member Name="DynamicMock(Type)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="84" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="DynamicMock(string, Type)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="ICall">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="100" />
                    <Metric Name="CyclomaticComplexity" Value="1" />
                    <Metric Name="ClassCoupling" Value="0" />
                    <Metric Name="DepthOfInheritance" Value="0" />
                    <Metric Name="LinesOfCode" Value="0" />
                  </Metrics>
                  <Members>
                    <Member Name="Call(object[]) : object">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="IMethod">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="100" />
                    <Metric Name="CyclomaticComplexity" Value="2" />
                    <Metric Name="ClassCoupling" Value="2" />
                    <Metric Name="DepthOfInheritance" Value="0" />
                    <Metric Name="LinesOfCode" Value="0" />
                  </Metrics>
                  <Members>
                    <Member Name="Name.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                    <Member Name="Expect(ICall) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="100" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="0" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="MethodSignature">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="65" />
                    <Metric Name="CyclomaticComplexity" Value="9" />
                    <Metric Name="ClassCoupling" Value="1" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="24" />
                  </Metrics>
                  <Members>
                    <Member Name="MethodSignature(string, string, Type[])">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="83" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="2" />
                      </Metrics>
                    </Member>
                    <Member Name="IsCompatibleWith(object[]) : bool">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="62" />
                        <Metric Name="CyclomaticComplexity" Value="4" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="10" />
                      </Metrics>
                    </Member>
                    <Member Name="GetArgTypes(object[]) : Type[]">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="60" />
                        <Metric Name="CyclomaticComplexity" Value="4" />
                        <Metric Name="ClassCoupling" Value="1" />
                        <Metric Name="LinesOfCode" Value="12" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="MockCall">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="62" />
                    <Metric Name="CyclomaticComplexity" Value="6" />
                    <Metric Name="ClassCoupling" Value="5" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="21" />
                  </Metrics>
                  <Members>
                    <Member Name="MockCall(MethodSignature, object, Exception, params object[])">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="78" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="Call(object[]) : object">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="55" />
                        <Metric Name="CyclomaticComplexity" Value="5" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="18" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="MockInterfaceHandler">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="51" />
                    <Metric Name="CyclomaticComplexity" Value="18" />
                    <Metric Name="ClassCoupling" Value="11" />
                    <Metric Name="DepthOfInheritance" Value="2" />
                    <Metric Name="LinesOfCode" Value="43" />
                  </Metrics>
                  <Members>
                    <Member Name="MockInterfaceHandler(Type, ICallHandler)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="92" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="3" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Invoke(IMessage) : IMessage">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="41" />
                        <Metric Name="CyclomaticComplexity" Value="17" />
                        <Metric Name="ClassCoupling" Value="10" />
                        <Metric Name="LinesOfCode" Value="42" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
                <Type Name="MockMethod">
                  <Metrics>
                    <Metric Name="MaintainabilityIndex" Value="76" />
                    <Metric Name="CyclomaticComplexity" Value="11" />
                    <Metric Name="ClassCoupling" Value="7" />
                    <Metric Name="DepthOfInheritance" Value="1" />
                    <Metric Name="LinesOfCode" Value="23" />
                  </Metrics>
                  <Members>
                    <Member Name="MockMethod(string)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="MockMethod(string, object)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="94" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="MockMethod(string, object, Exception)">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="78" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                    <Member Name="Name.get() : string">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="93" />
                        <Metric Name="CyclomaticComplexity" Value="1" />
                        <Metric Name="ClassCoupling" Value="0" />
                        <Metric Name="LinesOfCode" Value="1" />
                      </Metrics>
                    </Member>
                    <Member Name="Expect(ICall) : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="75" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="4" />
                      </Metrics>
                    </Member>
                    <Member Name="Call(object[]) : object">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="62" />
                        <Metric Name="CyclomaticComplexity" Value="3" />
                        <Metric Name="ClassCoupling" Value="4" />
                        <Metric Name="LinesOfCode" Value="10" />
                      </Metrics>
                    </Member>
                    <Member Name="Verify() : void">
                      <Metrics>
                        <Metric Name="MaintainabilityIndex" Value="79" />
                        <Metric Name="CyclomaticComplexity" Value="2" />
                        <Metric Name="ClassCoupling" Value="2" />
                        <Metric Name="LinesOfCode" Value="3" />
                      </Metrics>
                    </Member>
                  </Members>
                </Type>
              </Types>
            </Namespace>
          </Namespaces>
        </Module>
      </Modules>
    </Target>
  </Targets>
</CodeMetricsReport>